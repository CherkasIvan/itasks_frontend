{"ast":null,"code":"import { TagActionTypes } from './tag.actions';\nimport { createSelector } from '@ngrx/store';\nimport { createEntityAdapter } from '@ngrx/entity';\nexport const adapter = createEntityAdapter({\n  selectId: tag => tag.id,\n  sortComparer: false\n});\nexport const initialState = adapter.getInitialState({\n  ids: [],\n  loading: false,\n  entities: {}\n});\nexport function reducer(state = initialState, action) {\n  switch (action.type) {\n    case TagActionTypes.SearchSuccessAction:\n      {\n        return adapter.addAll(action.payload, state);\n      }\n    case TagActionTypes.SaveAction:\n      {\n        return Object.assign({}, state, {\n          loading: true\n        });\n      }\n    case TagActionTypes.CreateAction:\n      {\n        return Object.assign({}, state, {\n          loading: true\n        });\n      }\n    case TagActionTypes.CreateSuccessAction:\n      {\n        return adapter.addOne(action.payload, Object.assign({}, state, {\n          loading: false\n        }));\n      }\n    case TagActionTypes.SaveSuccessAction:\n      {\n        return Object.assign({}, state, {\n          entities: Object.assign({}, state.entities, {\n            [action.payload.id]: action.payload\n          }),\n          loading: false\n        });\n      }\n    case TagActionTypes.DeleteAction:\n      {\n        return Object.assign({}, state, {\n          loading: true\n        });\n      }\n    case TagActionTypes.DeleteSuccessAction:\n      {\n        return adapter.removeOne(action.payload, Object.assign({}, state, {\n          loading: false\n        }));\n      }\n    case TagActionTypes.TagClearAction:\n      {\n        return {\n          ...initialState\n        };\n      }\n    default:\n      return state;\n  }\n}\nexport const getEntities = state => state.entities;\nexport const getIds = state => state.ids;\nexport const getLoading = state => state.loading;\nexport const getEntitiesArray = createSelector(getEntities, getIds, (entities, ids) => {\n  return ids.map(id => entities[id]).sort((a, b) => a.name > b.name ? 1 : b.name > a.name ? -1 : 0);\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}