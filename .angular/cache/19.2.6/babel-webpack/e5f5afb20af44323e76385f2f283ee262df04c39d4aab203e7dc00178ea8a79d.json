{"ast":null,"code":"import { Actions, createEffect, ofType } from \"@ngrx/effects\";\nimport { catchError, map, switchMap } from \"rxjs/operators\";\nimport { of } from \"rxjs\";\nimport { StatusService } from \"../../services/status.service\";\nimport { CreateFailureAction, CreateSuccessAction, StatusActionTypes, SaveFailureAction, SaveSuccessAction, SearchFailureAction, SearchSuccessAction, SortSuccessAction, SortFailureAction, DeleteSuccessAction, DeleteFailureAction } from \"./status.actions\";\nimport { Store } from \"@ngrx/store\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@ngrx/effects\";\nimport * as i3 from \"../../services/status.service\";\nexport let StatusEffects = /*#__PURE__*/(() => {\n  class StatusEffects {\n    constructor(store, actions$, statusService) {\n      this.store = store;\n      this.actions$ = actions$;\n      this.statusService = statusService;\n      this.search$ = createEffect(() => this.actions$.pipe(ofType(StatusActionTypes.SearchAction), switchMap(() => {\n        return this.statusService.findAll().pipe(map(status => new SearchSuccessAction(status)), catchError(errors => of(new SearchFailureAction(errors))));\n      })));\n      this.save$ = createEffect(() => this.actions$.pipe(ofType(StatusActionTypes.SaveAction), map(action => action.payload), switchMap(model => {\n        return this.statusService.save(model).pipe(map(status => new SaveSuccessAction(status)), catchError(errors => of(new SaveFailureAction(errors))));\n      })));\n      this.create$ = createEffect(() => this.actions$.pipe(ofType(StatusActionTypes.CreateAction), map(action => action.payload), switchMap(model => {\n        return this.statusService.create(model).pipe(map(status => new CreateSuccessAction(status)), catchError(errors => of(new CreateFailureAction(errors))));\n      })));\n      this.sort$ = createEffect(() => this.actions$.pipe(ofType(StatusActionTypes.SortAction), map(action => action.payload), switchMap(model => {\n        return this.statusService.sort(model).pipe(map(status => new SortSuccessAction(status)), catchError(errors => of(new SortFailureAction(errors))));\n      })));\n      this.delete$ = createEffect(() => this.actions$.pipe(ofType(StatusActionTypes.DeleteAction), map(action => action.payload), switchMap(model => {\n        return this.statusService.delete(model).pipe(map(() => new DeleteSuccessAction(model.id)), catchError(errors => of(new DeleteFailureAction(errors))));\n      })));\n    }\n    static #_ = (() => this.ɵfac = function StatusEffects_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || StatusEffects)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.Actions), i0.ɵɵinject(i3.StatusService));\n    })();\n    static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: StatusEffects,\n      factory: StatusEffects.ɵfac\n    }))();\n  }\n  return StatusEffects;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}