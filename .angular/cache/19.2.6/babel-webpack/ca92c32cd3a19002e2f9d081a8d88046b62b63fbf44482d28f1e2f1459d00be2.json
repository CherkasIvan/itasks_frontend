{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { of } from 'rxjs/observable/of';\nimport { ProjectService } from '../../services/project.service';\nimport { CreateFailureAction, CreateSuccessAction, ProjectActionTypes, SaveFailureAction, SaveSuccessAction, SearchFailureAction, SearchSuccessAction, RestoreSuccessAction, RestoreFailureAction } from './project.actions';\nimport { CloseProjectFormMenu, CloseProjectMenu } from '../popup/popup.actions';\nimport { Store } from '@ngrx/store';\nimport { StatusClearAction } from '@core/redux/status/status.actions';\nimport { TaskClearAction } from '@core/redux/task/task.actions';\nimport { TagClearAction } from '@core/redux/tag/tag.actions';\nimport { MessageClearAction } from '@core/redux/message/message.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@ngrx/effects\";\nimport * as i3 from \"../../services/project.service\";\nexport class ProjectEffects {\n  constructor(store, actions$, projectService) {\n    this.store = store;\n    this.actions$ = actions$;\n    this.projectService = projectService;\n    this.search$ = this.actions$.pipe(ofType(ProjectActionTypes.SearchAction), switchMap(() => {\n      return this.projectService.findAll().pipe(map(projects => new SearchSuccessAction(projects)), catchError(errors => of(new SearchFailureAction(errors))));\n    }));\n    this.save$ = this.actions$.pipe(ofType(ProjectActionTypes.SaveAction), map(action => action.payload), switchMap(model => {\n      return this.projectService.save(model).pipe(switchMap(project => [new CloseProjectFormMenu(), new SaveSuccessAction(project)]), catchError(errors => of(new SaveFailureAction(errors))));\n    }));\n    this.create$ = this.actions$.pipe(ofType(ProjectActionTypes.CreateAction), map(action => action.payload), switchMap(model => {\n      return this.projectService.create(model).pipe(switchMap(project => [new CloseProjectFormMenu(), new CreateSuccessAction(project)]), catchError(errors => of(new CreateFailureAction(errors))));\n    }));\n    this.delete$ = this.actions$.pipe(ofType(ProjectActionTypes.DeleteAction), map(action => action.payload), switchMap(model => {\n      return this.projectService.delete(model).pipe(switchMap(project => [new CloseProjectMenu(), new SaveSuccessAction(project)]), catchError(errors => of(new SaveFailureAction(errors))));\n    }));\n    this.restore$ = this.actions$.pipe(ofType(ProjectActionTypes.RestoreAction), map(action => action.payload), switchMap(model => {\n      return this.projectService.restore(model).pipe(switchMap(project => [new CloseProjectMenu(), new RestoreSuccessAction(project)]), catchError(errors => of(new RestoreFailureAction(errors))));\n    }));\n    this.select$ = this.actions$.pipe(ofType(ProjectActionTypes.SelectAction), switchMap(() => [new TaskClearAction(), new MessageClearAction(), new TagClearAction(), new StatusClearAction()]));\n  }\n  static #_ = (() => this.ɵfac = function ProjectEffects_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || ProjectEffects)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.Actions), i0.ɵɵinject(i3.ProjectService));\n  })();\n  static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProjectEffects,\n    factory: ProjectEffects.ɵfac\n  }))();\n}\n__decorate([Effect(), __metadata(\"design:type\", Object)], ProjectEffects.prototype, \"search$\", void 0);\n__decorate([Effect(), __metadata(\"design:type\", Object)], ProjectEffects.prototype, \"save$\", void 0);\n__decorate([Effect(), __metadata(\"design:type\", Object)], ProjectEffects.prototype, \"create$\", void 0);\n__decorate([Effect(), __metadata(\"design:type\", Object)], ProjectEffects.prototype, \"delete$\", void 0);\n__decorate([Effect(), __metadata(\"design:type\", Object)], ProjectEffects.prototype, \"restore$\", void 0);\n__decorate([Effect(), __metadata(\"design:type\", Object)], ProjectEffects.prototype, \"select$\", void 0);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}