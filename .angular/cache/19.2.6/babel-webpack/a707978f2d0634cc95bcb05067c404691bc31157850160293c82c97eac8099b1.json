{"ast":null,"code":"import { select, Store } from '@ngrx/store';\nimport * as fromRoot from '@core/redux';\nimport { Subscription } from 'rxjs/Subscription';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nconst API_URL = environment.apiUrl;\nexport let ImagePreviewPipe = /*#__PURE__*/(() => {\n  class ImagePreviewPipe {\n    constructor(store) {\n      this.store = store;\n      this.subscription$ = new Subscription();\n      if (!this.projectId) {\n        this.subscription$.add(store.pipe(select(fromRoot.getProjectSelectedId)).subscribe(id => this.projectId = id));\n      }\n      if (!this.accessToken) {\n        this.subscription$.add(this.store.pipe(select(fromRoot.getToken)).filter(token => !!token).subscribe(token => {\n          this.accessToken = token;\n        }));\n      }\n    }\n    transform(value, width, height, isAvatar = false) {\n      let url = `${API_URL}files/`;\n      if (isAvatar) {\n        url = `${API_URL}files/view-avatar/${width}/${height}/${value.id}.png`;\n      } else {\n        url = `${API_URL}files/${value.id}?projectId=${this.projectId}&access-token=${this.accessToken}`;\n        if (width) {\n          url += `&width=${width}`;\n        }\n        if (height) {\n          url += `&height=${height}`;\n        }\n      }\n      return url;\n    }\n    ngOnDestroy() {\n      this.subscription$.unsubscribe();\n    }\n    static #_ = (() => this.ɵfac = function ImagePreviewPipe_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ImagePreviewPipe)(i0.ɵɵdirectiveInject(i1.Store, 16));\n    })();\n    static #_2 = (() => this.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n      name: \"imagePreview\",\n      type: ImagePreviewPipe,\n      pure: true\n    }))();\n  }\n  return ImagePreviewPipe;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}