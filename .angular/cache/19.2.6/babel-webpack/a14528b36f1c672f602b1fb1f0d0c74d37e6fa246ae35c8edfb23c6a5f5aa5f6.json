{"ast":null,"code":"import { select, Store } from \"@ngrx/store\";\nimport * as fromRoot from \"./core/redux/index\";\nimport { Subscription } from \"rxjs\";\nimport { DeviceDetectorService } from \"ngx-device-detector\";\nimport { NgClass } from \"@angular/common\";\nimport { RouterModule } from \"@angular/router\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@ngrx/store\";\nimport * as i3 from \"ngx-device-detector\";\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor(ngClass, store, deviceService) {\n      this.ngClass = ngClass;\n      this.store = store;\n      this.deviceService = deviceService;\n      this.title = \"app\";\n      this.subscription$ = new Subscription();\n      this.subscription$.add(this.store.pipe(select(fromRoot.getUser)).subscribe(user => this.userIdentity = user));\n    }\n    ngOnInit() {\n      if (this.deviceService.os !== \"mac\" && this.deviceService.os !== \"android\") {\n        this.ngClass.ngClass = \"no-mac\";\n        this.ngClass.ngDoCheck();\n      }\n    }\n    ngOnDestroy() {\n      this.subscription$.unsubscribe();\n    }\n    static #_ = (() => this.ɵfac = function AppComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AppComponent)(i0.ɵɵdirectiveInject(i1.NgClass, 2), i0.ɵɵdirectiveInject(i2.Store), i0.ɵɵdirectiveInject(i3.DeviceDetectorService));\n    })();\n    static #_2 = (() => this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AppComponent,\n      selectors: [[\"app-root\"]],\n      features: [i0.ɵɵProvidersFeature([RouterModule])],\n      decls: 1,\n      vars: 0,\n      template: function AppComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelement(0, \"router-outlet\");\n        }\n      },\n      styles: [\"[_nghost-%COMP%]{display:block;width:100%;height:100%}\"]\n    }))();\n  }\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}