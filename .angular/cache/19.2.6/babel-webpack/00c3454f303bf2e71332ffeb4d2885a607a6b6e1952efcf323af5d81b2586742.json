{"ast":null,"code":"import { FilterActionTypes } from './filter.actions';\nimport { createSelector } from '@ngrx/store';\nimport { createEntityAdapter } from '@ngrx/entity';\nexport const adapter = createEntityAdapter({\n  selectId: filter => filter.id,\n  sortComparer: false\n});\nexport const initialState = adapter.getInitialState({\n  ids: [],\n  loading: false,\n  selectedId: null,\n  entities: {}\n});\nexport function reducer(state = initialState, action) {\n  switch (action.type) {\n    case FilterActionTypes.SelectAction:\n      {\n        return Object.assign({}, state, {\n          selectedId: action.payload\n        });\n      }\n    case FilterActionTypes.SearchSuccessAction:\n      {\n        return adapter.addAll(action.payload, state);\n      }\n    case FilterActionTypes.CreateAction:\n      {\n        return Object.assign({}, state, {\n          loading: true\n        });\n      }\n    case FilterActionTypes.CreateSuccessAction:\n      {\n        return adapter.addOne(action.payload, Object.assign({}, state, {\n          loading: false\n        }));\n      }\n    case FilterActionTypes.SaveAction:\n      {\n        return Object.assign({}, state, {\n          loading: true\n        });\n      }\n    case FilterActionTypes.SaveSuccessAction:\n      {\n        return adapter.updateOne({\n          id: action.payload.id,\n          changes: action.payload\n        }, Object.assign({}, state, {\n          loading: false\n        }));\n      }\n    case FilterActionTypes.DeleteAction:\n      {\n        return Object.assign({}, state, {\n          loading: true\n        });\n      }\n    case FilterActionTypes.DeleteSuccessAction:\n      {\n        return adapter.removeOne(action.payload.id, Object.assign({}, state, {\n          loading: false\n        }));\n      }\n    default:\n      return state;\n  }\n}\nexport const getEntities = state => state.entities;\nexport const getIds = state => state.ids;\nexport const getLoading = state => state.loading;\nexport const getEntitiesArray = createSelector(getEntities, getIds, (entities, ids) => ids.map(id => entities[id]));\nexport const getSelectedId = state => state.selectedId;\nexport const getSelectedEntity = createSelector(getEntities, getSelectedId, (entities, selectedId) => entities[selectedId]);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}