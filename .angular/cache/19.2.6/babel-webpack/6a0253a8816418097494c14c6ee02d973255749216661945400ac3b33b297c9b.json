{"ast":null,"code":"import { createSelector } from \"@ngrx/store\";\nimport { createEntityAdapter } from \"@ngrx/entity\";\nimport { MessageActionTypes } from \"./message.actions\";\nexport const adapter = createEntityAdapter({\n  selectId: message => message.id,\n  sortComparer: false\n});\nexport const initialState = adapter.getInitialState({\n  ids: [],\n  editId: null,\n  loading: false,\n  entities: {}\n});\nexport function reducer(state = initialState, action) {\n  switch (action.type) {\n    case MessageActionTypes.SearchSuccessAction:\n      {\n        return adapter.addMany(action.payload, state);\n      }\n    case MessageActionTypes.DeleteSuccessAction:\n      {\n        return adapter.removeOne(action.payload.id, state);\n      }\n    case MessageActionTypes.CreateAction:\n      {\n        return Object.assign({}, state, {\n          loading: true\n        });\n      }\n    case MessageActionTypes.CreateSuccessAction:\n      {\n        return adapter.addOne(action.payload, Object.assign({}, state, {\n          loading: false,\n          editId: null\n        }));\n      }\n    case MessageActionTypes.SaveAction:\n      {\n        return Object.assign({}, state, {\n          loading: true\n        });\n      }\n    case MessageActionTypes.SaveSuccessAction:\n      {\n        return Object.assign({}, state, {\n          entities: Object.assign({}, state.entities, {\n            [action.payload.id]: action.payload\n          }),\n          loading: false,\n          editId: null\n        });\n      }\n    case MessageActionTypes.LikeSuccessAction:\n      {\n        const entity = state.entities[action.payload.id];\n        entity.likes = action.payload.likes;\n        return Object.assign({}, state, {\n          entities: Object.assign({}, state.entities, {\n            [action.payload.id]: entity\n          })\n        });\n      }\n    case MessageActionTypes.PinSuccessAction:\n      {\n        const entity = state.entities[action.payload.id];\n        entity.isPin = action.payload.isPin;\n        return Object.assign({}, state, {\n          entities: Object.assign({}, state.entities, {\n            [action.payload.id]: entity\n          })\n        });\n      }\n    case MessageActionTypes.SetEditId:\n      {\n        return Object.assign({}, state, {\n          editId: action.payload\n        });\n      }\n    case MessageActionTypes.MessageClearAction:\n      {\n        return {\n          ...initialState\n        };\n      }\n    default:\n      return state;\n  }\n}\nexport const getEditId = state => state.editId;\nexport const getEntities = state => state.entities;\nexport const getIds = state => state.ids;\nexport const getEntitiesArray = createSelector(getEntities, getIds, (entities, ids) => ids.map(id => entities[id]));\nexport const getEntityEdit = createSelector(getEntities, getEditId, (entities, id) => entities[id]);\nexport const getEntitiesArrayByTaskId = taskId => createSelector(getEntitiesArray, entities => {\n  return entities.filter(item => item.taskId === taskId);\n});\nexport const getEntitiesArrayPinned = createSelector(getEntitiesArray, entities => {\n  return entities.filter(item => item.isPin === true);\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}