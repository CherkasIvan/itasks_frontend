{"ast":null,"code":"import { Router } from \"@angular/router\";\nimport { Actions, createEffect, ofType } from \"@ngrx/effects\";\nimport { of } from \"rxjs\";\nimport { tap, map, switchMap, catchError } from \"rxjs/operators\";\nimport { AuthActionTypes, SignUpSuccessAction, SignUpFailureAction, SignUpStepPersonalDataSuccessAction, SignUpStepPersonalDataFailureAction, SignUpStepSecuritySuccessAction, SignUpStepSecurityFailureAction, SignUpStepInterviewSuccessAction, SignUpStepInterviewFailureAction, SignInSuccessAction, SignInFailureAction, InviteConfirmationFailureAction, InviteConfirmationSuccessAction, GetUserSuccessAction, GetUserFailureAction } from \"./auth.actions\";\nimport { AuthService } from \"../../services/auth.service\";\nimport { InviteService } from \"@core/services/invite.service\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../../services/auth.service\";\nimport * as i3 from \"@core/services/invite.service\";\nimport * as i4 from \"@angular/router\";\nexport let AuthEffects = /*#__PURE__*/(() => {\n  class AuthEffects {\n    constructor(actions$, authService, inviteService, router) {\n      this.actions$ = actions$;\n      this.authService = authService;\n      this.inviteService = inviteService;\n      this.router = router;\n      this.inviteConfirmation$ = createEffect(() => this.actions$.pipe(ofType(AuthActionTypes.InviteConfirmationAction), map(action => action.payload), switchMap(token => {\n        return this.inviteService.confirmation(token).pipe(map(user => new InviteConfirmationSuccessAction(user)), catchError(errors => of(new InviteConfirmationFailureAction(errors))));\n      })));\n      this.inviteConfirmationSuccess$ = createEffect(() => this.actions$.pipe(ofType(AuthActionTypes.InviteConfirmationSuccessAction), tap(() => this.router.navigate([\"/dashboard\"]))), {\n        dispatch: false\n      });\n      this.getUser$ = createEffect(() => this.actions$.pipe(ofType(AuthActionTypes.GetUserAction), switchMap(() => {\n        return this.authService.getUser().pipe(map(user => new GetUserSuccessAction(user)), catchError(errors => of(new GetUserFailureAction(errors))));\n      })));\n      this.signUp$ = createEffect(() => this.actions$.pipe(ofType(AuthActionTypes.SignUpAction), map(action => action.payload), switchMap(model => {\n        return this.authService.signUp(model).pipe(map(user => new SignUpSuccessAction(user)), catchError(errors => of(new SignUpFailureAction(errors))));\n      })));\n      this.signIn$ = createEffect(() => this.actions$.pipe(ofType(AuthActionTypes.SignInAction), map(action => action.payload), switchMap(model => {\n        return this.authService.signIn(model).pipe(map(user => new SignInSuccessAction(user)), catchError(errors => of(new SignInFailureAction(errors))));\n      })));\n      this.signInSuccess$ = createEffect(() => this.actions$.pipe(ofType(AuthActionTypes.SignInSuccessAction), tap(() => this.router.navigate([\"/dashboard\"]))), {\n        dispatch: false\n      });\n      this.signUpGoogle$ = createEffect(() => this.actions$.pipe(ofType(AuthActionTypes.SignUpGoogleAction), map(action => action.payload), switchMap(model => {\n        return this.authService.signUpGoogle(model).pipe(map(user => new SignUpSuccessAction(user)), catchError(errors => of(new SignUpFailureAction(errors))));\n      })));\n      this.signUpSuccess$ = createEffect(() => this.actions$.pipe(ofType(AuthActionTypes.SignUpSuccessAction), tap(() => this.router.navigate([\"/dashboard\"]))), {\n        dispatch: false\n      });\n      this.signUpStepPersonalData$ = createEffect(() => this.actions$.pipe(ofType(AuthActionTypes.SignUpStepPersonalDataAction), map(action => action.payload), switchMap(model => {\n        return this.authService.signUpStepPersonalData(model).pipe(map(user => new SignUpStepPersonalDataSuccessAction(user)), catchError(errors => of(new SignUpStepPersonalDataFailureAction(errors))));\n      })));\n      this.signUpStepPersonalDataSuccess$ = createEffect(() => this.actions$.pipe(ofType(AuthActionTypes.SignUpStepPersonalDataSuccessAction), tap(() => this.router.navigate([\"/auth/sign-up/step-2\"]))), {\n        dispatch: false\n      });\n      this.signUpStepSecurity$ = createEffect(() => this.actions$.pipe(ofType(AuthActionTypes.SignUpStepSecurityAction), map(action => action.payload), switchMap(model => {\n        return this.authService.signUpStepSecurity(model).pipe(map(user => new SignUpStepSecuritySuccessAction(user)), catchError(errors => of(new SignUpStepSecurityFailureAction(errors))));\n      })));\n      this.signUpStepSecuritySuccess$ = createEffect(() => this.actions$.pipe(ofType(AuthActionTypes.SignUpStepSecuritySuccessAction), tap(() => this.router.navigate([\"/auth/sign-up/step-3\"]))), {\n        dispatch: false\n      });\n      this.signUpStepInterview$ = createEffect(() => this.actions$.pipe(ofType(AuthActionTypes.SignUpStepInterviewAction), map(action => action.payload), switchMap(model => {\n        return this.authService.signUpStepInterview(model).pipe(map(user => new SignUpStepInterviewSuccessAction(user)), catchError(errors => of(new SignUpStepInterviewFailureAction(errors))));\n      })));\n      this.signUpStepInterviewSuccess$ = createEffect(() => this.actions$.pipe(ofType(AuthActionTypes.SignUpStepInterviewSuccessAction), tap(() => this.router.navigate([\"/dashboard\"]))), {\n        dispatch: false\n      });\n    }\n    static #_ = (() => this.ɵfac = function AuthEffects_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i3.InviteService), i0.ɵɵinject(i4.Router));\n    })();\n    static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthEffects,\n      factory: AuthEffects.ɵfac\n    }))();\n  }\n  return AuthEffects;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}