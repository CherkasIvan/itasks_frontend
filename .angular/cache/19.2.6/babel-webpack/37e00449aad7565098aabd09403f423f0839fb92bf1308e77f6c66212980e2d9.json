{
  "ast": null,
  "code": "import { ApiService } from './api.service';\nimport { TaskModel } from '../models/task.model';\nimport 'rxjs';\nimport { getSearchQuerys } from '@core/utils/query-builder';\nimport * as i0 from \"@angular/core\";\nexport let TaskService = /*#__PURE__*/(() => {\n  class TaskService extends ApiService {\n    findOne(id) {\n      return this.http.get(this.getApiUrl(`tasks/${id}`)).map(response => new TaskModel().setAttributes(response));\n    }\n    findAllFavorite() {\n      return this.http.get(this.getApiUrl(`tasks?favorite=1`)).map(response => response.map(model => new TaskModel().setAttributes(model)));\n    }\n    findAll(query) {\n      return this.http.get(this.getApiUrl(`tasks?${getSearchQuerys(query).join('&')}`)).map(response => response.map(model => new TaskModel().setAttributes(model)));\n    }\n    findAllNotification() {\n      return this.http.get(this.getApiUrl(`tasks?chat=1`)).map(response => response.map(model => new TaskModel().setAttributes(model)));\n    }\n    save(model) {\n      return this.http.put(this.getApiUrl(`tasks/${model.id}`), model).map(response => new TaskModel().setAttributes(response));\n    }\n    favorite(model) {\n      return this.http.put(this.getApiUrl(`tasks/favorite/${model.id}`), {}).map(response => new TaskModel().setAttributes(response));\n    }\n    create(model) {\n      return this.http.post(this.getApiUrl(`tasks`), model).map(response => new TaskModel().setAttributes(response));\n    }\n    order(model) {\n      return this.http.put(this.getApiUrl(`tasks/order/${model.id}`), model).map(response => new TaskModel().setAttributes(response));\n    }\n    delete(model) {\n      return this.http.delete(this.getApiUrl(`tasks/${model.id}`)).map(response => new TaskModel().setAttributes(response));\n    }\n    static #_ = (() => this.ɵfac = /*@__PURE__*/(() => {\n      let ɵTaskService_BaseFactory;\n      return function TaskService_Factory(__ngFactoryType__) {\n        return (ɵTaskService_BaseFactory || (ɵTaskService_BaseFactory = i0.ɵɵgetInheritedFactory(TaskService)))(__ngFactoryType__ || TaskService);\n      };\n    })())();\n    static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TaskService,\n      factory: TaskService.ɵfac,\n      providedIn: 'root'\n    }))();\n  }\n  return TaskService;\n})();",
  "map": null,
  "metadata": {},
  "sourceType": "module",
  "externalDependencies": []
}
