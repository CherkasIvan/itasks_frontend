{"ast":null,"code":"var _a, _b, _c;\nimport { __decorate, __metadata } from \"tslib\";\nimport { ChangeDetectionStrategy, Component } from \"@angular/core\";\nimport { ActivatedRoute, Router, RouterModule } from \"@angular/router\";\nimport { Store, select } from \"@ngrx/store\";\nimport { filter, map } from \"rxjs/operators\";\nimport { SocketService } from \"@core/services/socket.service\";\nimport { MessageService } from \"@core/services/message.service\";\n// import {ElectronService} from '@core/services/electron.service';\nimport * as fromRoot from \"@core/redux/index\";\nimport * as ProjectActions from \"@core/redux/project/project.actions\";\nimport * as StatusActions from \"@core/redux/status/status.actions\";\nimport * as TagActions from \"@core/redux/tag/tag.actions\";\nimport * as TaskActions from \"@core/redux/task/task.actions\";\nimport * as InviteActions from \"@core/redux/invite/invite.actions\";\nimport * as FilterActions from \"@core/redux/filter/filter.actions\";\nimport { ImageService } from \"@core/services/image/image.service\";\nimport { animate, style, transition, trigger } from \"@angular/animations\";\nimport * as AuthActions from \"@core/redux/auth/auth.actions\";\nimport { AsyncPipe, NgSwitch } from \"@angular/common\";\nimport { HeaderComponent } from \"./components/header/header.component\";\nimport { Subscription } from \"rxjs\";\nlet CabinetComponent = class CabinetComponent {\n  /**\n   *\n   * @param {Store<State>} store\n   * @param {SocketService} socket\n   * @param {MessageService} messageService\n   // * @param {ElectronService} electronService\n   * @param {SocketService} socketService\n   * @param {Router} router\n   * @param {ActivatedRoute} route\n   */\n  constructor(store, socket, messageService,\n  // private electronService: ElectronService,\n  imageService, router, route) {\n    this.store = store;\n    this.socket = socket;\n    this.messageService = messageService;\n    this.imageService = imageService;\n    this.router = router;\n    this.route = route;\n    /** Подписки */\n    this.subscription$ = new Subscription();\n    this.isShowSidebar$ = store.pipe(select(fromRoot.getShowSidebar));\n    this.isShowSidebarFilter$ = store.pipe(select(fromRoot.getShowSidebarFilter));\n    this.popupProjectMenu$ = store.pipe(select(fromRoot.getPopupProjectMenu));\n    this.popupProjectForm$ = store.pipe(select(fromRoot.getPopupProjectForm));\n    this.projectList$ = store.pipe(select(fromRoot.getProjectActiveEntities));\n    this.statusList$ = store.pipe(select(fromRoot.getStatusEntities));\n    this.inviteList$ = store.pipe(select(fromRoot.getInviteActiveEntities));\n    this.subscription$.add(this.store.pipe(select(fromRoot.getTaskSelectedId)).subscribe(id => this.taskOpenId = id));\n    // Получаем из стора ID проекта, загружаем данные и подписываемся на получение пользователей онлайн для проекта\n    this.subscription$.add(store.pipe(select(fromRoot.getProjectSelectedId)).subscribe(id => {\n      this.projectSelectedId = id;\n      setTimeout(() => {\n        this._initData();\n        this.socket.listenOnline(id);\n      });\n    }));\n    // Как только авторизовались подписываемся на сокет\n    this.subscription$.add(store.pipe(select(fromRoot.getToken), filter(token => !!token)).subscribe(token => {\n      this.socket.listen(token);\n    }));\n    // Подписываемся на роутинг params\n    this.subscription$.add(route.params.pipe(map(params => params.projectId),\n    // Используйте map вместо pluck\n    filter(projectId => !!projectId)).subscribe(projectId => {\n      this.store.dispatch(new ProjectActions.SelectAction(projectId));\n    }));\n    // Если это APP\n    // if (electronService.isElectron()) {\n    //   this\n    //     .subscription$\n    //     .add(store\n    //       .pipe(select(fromRoot.getNotificationsTask))\n    //       .subscribe((tasks) => {\n    //         this._updateBadge(tasks);\n    //       }));\n    //\n    //   // Как только возобновили апп из дока сразу загружаем все данные с апи\n    //   this\n    //     .electronService\n    //     .remote\n    //     .powerMonitor\n    //     .on('resume', () => {\n    //       if (this.projectSelectedId) {\n    //         this._initData();\n    //       }\n    //     });\n    // }\n  }\n  ngOnInit() {\n    this.store.dispatch(new ProjectActions.SearchAction());\n  }\n  ngOnDestroy() {\n    this.subscription$.unsubscribe();\n  }\n  /**\n   * Обновление badge в MacOs\n   * @param tasks\n   * @private\n   */\n  _updateBadge(tasks) {\n    let count = 0;\n    if (tasks) {\n      tasks.forEach(task => {\n        count += task.countNotifications;\n      });\n    }\n    // this.electronService.remote.app.dock.setBadge(count ? count.toString() : '');\n  }\n  /**\n   * Инициализация загрузки данных\n   * @private\n   */\n  _initData() {\n    this.store.dispatch(new AuthActions.GetUserAction());\n    this.store.dispatch(new FilterActions.SearchAction());\n    this.store.dispatch(new TagActions.SearchAction());\n    this.store.dispatch(new StatusActions.SearchAction());\n    this.store.dispatch(new TaskActions.SearchFavoriteAction());\n    this.store.dispatch(new TaskActions.SearchNotificationAction());\n    this.store.dispatch(new InviteActions.SearchAction({}));\n  }\n};\nCabinetComponent = __decorate([Component({\n  selector: \"app-cabinet\",\n  templateUrl: \"./cabinet.component.html\",\n  styleUrls: [\"./cabinet.component.less\"],\n  animations: [trigger(\"enterAnimation\", [transition(\":enter\", [style({\n    marginLeft: -220\n  }), animate(\"152ms ease-in\", style({\n    marginLeft: 0\n  }))]), transition(\":leave\", [style({\n    marginLeft: 0\n  }), animate(\"152ms ease-out\", style({\n    marginLeft: -220\n  }))])])],\n  imports: [NgSwitch, RouterModule, HeaderComponent, AsyncPipe],\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}), __metadata(\"design:paramtypes\", [Store, typeof (_a = typeof SocketService !== \"undefined\" && SocketService) === \"function\" ? _a : Object, typeof (_b = typeof MessageService !== \"undefined\" && MessageService) === \"function\" ? _b : Object, typeof (_c = typeof ImageService !== \"undefined\" && ImageService) === \"function\" ? _c : Object, Router, ActivatedRoute])], CabinetComponent);\nexport { CabinetComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}