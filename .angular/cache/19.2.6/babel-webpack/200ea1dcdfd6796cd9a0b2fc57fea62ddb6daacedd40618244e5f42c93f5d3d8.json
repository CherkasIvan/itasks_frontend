{"ast":null,"code":"import { AuthActionTypes } from './auth.actions';\nimport { createSelector } from '@ngrx/store';\nexport const initialState = {\n  loading: false,\n  isAuth: false,\n  token: null,\n  step: null,\n  errors: {},\n  user: null\n};\nexport function reducer(state = initialState, action) {\n  switch (action.type) {\n    case AuthActionTypes.GetUserAction:\n      return Object.assign({}, state, {\n        loading: true,\n        errors: {}\n      });\n    case AuthActionTypes.GetUserSuccessAction:\n      return Object.assign({}, state, {\n        loading: false,\n        user: action.payload,\n        step: action.payload.step,\n        errors: {}\n      });\n    case AuthActionTypes.GetUserFailureAction:\n      return Object.assign({}, state, initialState);\n    case AuthActionTypes.SignInAction:\n      return Object.assign({}, state, {\n        loading: true,\n        errors: {}\n      });\n    case AuthActionTypes.SignInSuccessAction:\n      return Object.assign({}, state, {\n        loading: false,\n        isAuth: true,\n        errors: {},\n        token: action.payload.token,\n        step: action.payload.step,\n        user: action.payload\n      });\n    case AuthActionTypes.SignInFailureAction:\n      return Object.assign({}, state, {\n        loading: false,\n        errors: action.payload.error\n      });\n    case AuthActionTypes.SignUpAction:\n      return Object.assign({}, state, {\n        loading: true,\n        errors: {}\n      });\n    case AuthActionTypes.SignUpSuccessAction:\n      return Object.assign({}, state, {\n        loading: false,\n        isAuth: true,\n        errors: {},\n        token: action.payload.token,\n        step: action.payload.step,\n        user: action.payload\n      });\n    case AuthActionTypes.InviteConfirmationAction:\n      return Object.assign({}, state, {\n        loading: true,\n        errors: {}\n      });\n    case AuthActionTypes.InviteConfirmationSuccessAction:\n      return Object.assign({}, state, {\n        loading: false,\n        isAuth: true,\n        errors: {},\n        token: action.payload.token,\n        step: action.payload.step,\n        user: action.payload\n      });\n    case AuthActionTypes.InviteConfirmationFailureAction:\n      return Object.assign({}, state, {\n        loading: false,\n        errors: action.payload.error\n      });\n    case AuthActionTypes.SignUpFailureAction:\n      return Object.assign({}, state, {\n        loading: false,\n        errors: action.payload.error\n      });\n    case AuthActionTypes.SignUpStepPersonalDataAction:\n      return Object.assign({}, state, {\n        loading: true\n      });\n    case AuthActionTypes.SignUpStepPersonalDataSuccessAction:\n      return Object.assign({}, state, {\n        loading: false,\n        isAuth: true,\n        errors: {},\n        step: action.payload.step,\n        user: action.payload\n      });\n    case AuthActionTypes.SignUpStepPersonalDataFailureAction:\n      return Object.assign({}, state, {\n        loading: false,\n        errors: action.payload.error\n      });\n    case AuthActionTypes.SignUpStepSecurityAction:\n      return Object.assign({}, state, {\n        loading: true\n      });\n    case AuthActionTypes.SignUpStepSecuritySuccessAction:\n      return Object.assign({}, state, {\n        loading: false,\n        isAuth: true,\n        errors: {},\n        step: action.payload.step,\n        user: action.payload\n      });\n    case AuthActionTypes.SignUpStepSecurityFailureAction:\n      return Object.assign({}, state, {\n        loading: false,\n        errors: action.payload.error\n      });\n    case AuthActionTypes.SignUpStepInterviewAction:\n      return Object.assign({}, state, {\n        loading: true\n      });\n    case AuthActionTypes.SignUpStepInterviewSuccessAction:\n      return Object.assign({}, state, {\n        loading: false,\n        isAuth: true,\n        errors: {},\n        step: action.payload.step,\n        user: action.payload\n      });\n    case AuthActionTypes.SignUpStepInterviewFailureAction:\n      return Object.assign({}, state, {\n        loading: false,\n        errors: action.payload.error\n      });\n    case AuthActionTypes.SignOutAction:\n      return Object.assign({}, state, initialState);\n    default:\n      return state;\n  }\n}\nexport const getIsAuth = state => state.isAuth;\nexport const getStep = state => state.step;\nexport const getToken = state => state.token;\nexport const getErrors = state => state.errors;\nexport const getLoading = state => state.loading;\nexport const getUser = state => state.user;\nexport const getCanAdmin = createSelector(getUser, user => user ? user.canAdmin : false);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}