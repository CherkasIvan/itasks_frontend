{"ast":null,"code":"import { __decorate } from \"tslib\";\n/**\n * Core\n */\nimport { BrowserModule } from '@angular/platform-browser';\nimport { LOCALE_ID, NgModule } from '@angular/core';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { StoreModule } from '@ngrx/store';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { EffectsModule } from '@ngrx/effects';\n/**\n * Modules\n */\nimport { AppRoutingModule } from './app-routing.module';\n/**\n * Components\n */\nimport { AppComponent } from './app.component';\n/**\n * Reducers\n */\nimport { metaReducers, reducers } from '@core/redux/index';\n/**\n * Interceptors\n */\nimport { TokenInterceptor } from './auth/interceptors/token.interceptor';\nimport { ProjectInterceptor } from '@core/interceptors/project.interceptor';\n/**\n * Effects\n */\nimport { AuthEffects } from '@core/redux/auth/auth.effects';\nimport { ProjectEffects } from '@core/redux/project/project.effects';\nimport { TaskEffects } from '@core/redux/task/task.effects';\nimport { MessageEffects } from '@core/redux/message/message.effects';\nimport { StatusEffects } from '@core/redux/status/status.effects';\n/**\n * Environment\n */\nimport { environment } from '../environments/environment';\nimport { InviteEffects } from '@core/redux/invite/invite.effects';\nimport { registerLocaleData } from '@angular/common';\nimport localeRu from '@angular/common/locales/ru';\nimport { FileService } from '@core/services/file.service';\nimport { StoreMessageService } from '@core/services/store-message.service';\nimport { ApiService } from '@core/services/api.service';\nimport { TaskService } from '@core/services/task.service';\nimport { MessageService } from '@core/services/message.service';\nimport { StatusService } from '@core/services/status.service';\nimport { InviteService } from '@core/services/invite.service';\nimport { AuthGuardService } from '@core/services/auth-guard.service';\nimport { ProjectService } from '@core/services/project.service';\nimport { StoreTaskService } from '@core/services/store-task.service';\nimport { AuthService } from '@core/services/auth.service';\nimport { ImagePreviewPipe } from '@ux/pipes/image-preview.pipe';\nimport { TimeAgoPipe } from '@ux/pipes/time-ago.pipe';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n// import {ElectronService} from '@core/services/electron.service';\nimport { TagService } from '@core/services/tag.service';\nimport { TagEffects } from '@core/redux/tag/tag.effects';\nimport { FilterEffects } from '@core/redux/filter/filter.effects';\nimport { TaskQueryService } from '@core/services/query/task.query.service';\nimport { FilterApiService } from '@core/services/api/filter.api.service';\nimport { FilterStoreService } from '@core/services/store/filter.store.service';\nimport { ImageService } from '@core/services/image/image.service';\nimport { DeviceDetectorModule } from 'ngx-device-detector';\nimport { SocketIoModule } from 'ngx-socket-io';\nregisterLocaleData(localeRu);\nconst config = environment.socket;\nlet AppModule = class AppModule {};\nAppModule = __decorate([NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, BrowserAnimationsModule, AppRoutingModule, FormsModule, ReactiveFormsModule, HttpClientModule, StoreModule.forRoot(reducers, {\n    metaReducers\n  }), EffectsModule.forRoot([ProjectEffects, AuthEffects, StatusEffects, TaskEffects, MessageEffects, InviteEffects, TagEffects, FilterEffects]), DeviceDetectorModule.forRoot(), SocketIoModule.forRoot(config), !environment.production ? StoreDevtoolsModule.instrument() : []],\n  providers: [{\n    provide: LOCALE_ID,\n    useValue: 'ru-RU'\n  }, {\n    provide: HTTP_INTERCEPTORS,\n    useClass: TokenInterceptor,\n    multi: true\n  }, {\n    provide: HTTP_INTERCEPTORS,\n    useClass: ProjectInterceptor,\n    multi: true\n  }, ApiService, AuthGuardService, FileService, ProjectService, StatusService, TaskService, MessageService, InviteService, StoreMessageService, ImagePreviewPipe, TimeAgoPipe, StoreTaskService, AuthGuardService, AuthService,\n  // ElectronService,\n  TagService, FilterApiService, FilterStoreService, TaskQueryService, ImageService],\n  exports: [],\n  bootstrap: [AppComponent]\n})], AppModule);\nexport { AppModule };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}