{"ast":null,"code":"// import {\n//     HTTP_INTERCEPTORS,\n//     HttpClient,\n//     provideHttpClient,\n//     withFetch,\n//     withInterceptorsFromDi,\n// } from '@angular/common/http';\n// import {\n//     ApplicationConfig,\n//     enableProdMode,\n//     importProvidersFrom,\n//     isDevMode,\n// } from '@angular/core';\n// import { initializeApp, provideFirebaseApp } from '@angular/fire/app';\n// import { getAuth, provideAuth } from '@angular/fire/auth';\n// import { AngularFireModule } from '@angular/fire/compat';\n// import { AngularFireDatabaseModule } from '@angular/fire/compat/database';\n// import { getDatabase, provideDatabase } from '@angular/fire/database';\n// import { getFirestore, provideFirestore } from '@angular/fire/firestore';\n// import { getStorage, provideStorage } from '@angular/fire/storage';\n// import {\n//     BrowserModule,\n//     provideClientHydration,\n//     withHttpTransferCacheOptions,\n// } from '@angular/platform-browser';\n// import {\n//     BrowserAnimationsModule,\n//     provideAnimations,\n// } from '@angular/platform-browser/animations';\n// import {\n//     PreloadAllModules,\n//     RouterModule,\n//     provideRouter,\n//     withViewTransitions,\n// } from '@angular/router';\n// import { provideServiceWorker } from '@angular/service-worker';\n// import { EffectsModule, provideEffects } from '@ngrx/effects';\n// import {\n//     StoreRouterConnectingModule,\n//     provideRouterStore,\n//     routerReducer,\n// } from '@ngrx/router-store';\n// import { StoreModule, provideStore } from '@ngrx/store';\n// import { provideStoreDevtools } from '@ngrx/store-devtools';\n// import { ImagesEffects } from '@layout/store/images-store/images.effects';\n// import { logoReducer } from '@layout/store/images-store/images.reducers';\n// import {\n//     TranslateLoader,\n//     TranslateModule,\n//     TranslateService,\n// } from '@ngx-translate/core';\n// import { TranslateHttpLoader } from '@ngx-translate/http-loader';\n// import { environment } from '../environments/environment.development';\n// import { LoadingInterceptor } from './core/interceptors/loading.interceptor';\n// import { AuthEffects } from './layout/store/auth-store/auth.effects';\n// import { authReducer } from './layout/store/auth-store/auth.reducers';\n// import { darkModeReducer } from './layout/store/dark-mode-store/dark-mode.reducers';\n// import { experienceDialogReducer } from './layout/store/experience-dialog-store/experience-dialog.reducers';\n// import { FirebaseEffects } from './layout/store/firebase-store/firebase.effects';\n// import { firebaseReducer } from './layout/store/firebase-store/firebase.reducers';\n// import { GithubRepositoriesEffects } from './layout/store/github-projects-store/github-projects.effects';\n// import { githubRepositoriesReducer } from './layout/store/github-projects-store/github-projects.reducer';\n// import { languageReducer } from './layout/store/language-selector-store/language.reducers';\n// import { spinnerReducer } from './layout/store/spinner-store/spinner.reducer';\n// import { MAIN_ROUTES } from './main.routes';\n// export function HttpLoaderFactory(http: HttpClient) {\n//     return new TranslateHttpLoader(http, '/assets/i18n/', '.json');\n// }\n// if (environment.production) {\n//     enableProdMode();\n// }\n// export const appConfig: ApplicationConfig = {\n//     providers: [\n//         provideHttpClient(withInterceptorsFromDi(), withFetch()),\n//         provideAnimations(),\n//         provideRouter(MAIN_ROUTES, withViewTransitions()),\n//         provideFirebaseApp(() => initializeApp(environment.firebase)),\n//         provideFirestore(() => getFirestore()),\n//         provideDatabase(() => getDatabase()),\n//         provideStorage(() => getStorage()),\n//         provideAuth(() => getAuth()),\n//         provideStore(),\n//         provideHttpClient(),\n//         {\n//             provide: TranslateLoader,\n//             useFactory: HttpLoaderFactory,\n//             deps: [HttpClient],\n//         },\n//         TranslateService,\n//         importProvidersFrom([\n//             AngularFireModule.initializeApp(environment.firebase),\n//             AngularFireDatabaseModule,\n//             BrowserModule,\n//             BrowserAnimationsModule,\n//             RouterModule.forRoot(MAIN_ROUTES, {\n//                 preloadingStrategy: PreloadAllModules,\n//             }),\n//             StoreModule.forRoot({\n//                 router: routerReducer,\n//             }),\n//             TranslateModule.forRoot({\n//                 defaultLanguage: 'en',\n//                 loader: {\n//                     provide: TranslateLoader,\n//                     useFactory: HttpLoaderFactory,\n//                     deps: [HttpClient],\n//                 },\n//             }),\n//             EffectsModule.forRoot({}),\n//             EffectsModule.forRoot([\n//                 FirebaseEffects,\n//                 AuthEffects,\n//                 FirebaseEffects,\n//                 AuthEffects,\n//                 GithubRepositoriesEffects,\n//                 ImagesEffects,\n//             ]),\n//             StoreModule.forFeature('logo', logoReducer),\n//             StoreModule.forFeature('spinner', spinnerReducer),\n//             StoreModule.forFeature('firebase', firebaseReducer),\n//             StoreModule.forFeature('darkMode', darkModeReducer),\n//             StoreModule.forFeature('language', languageReducer),\n//             StoreModule.forFeature('github', githubRepositoriesReducer),\n//             StoreModule.forFeature('experience', experienceDialogReducer),\n//             StoreModule.forFeature('auth', authReducer),\n//             StoreRouterConnectingModule.forRoot(),\n//         ]),\n//         {\n//             provide: HTTP_INTERCEPTORS,\n//             useClass: LoadingInterceptor,\n//             multi: true,\n//         },\n//         provideClientHydration(\n//             withHttpTransferCacheOptions({ includePostRequests: true }),\n//         ),\n//         provideStore({\n//             router: routerReducer,\n//         }),\n//         provideEffects(),\n//         provideRouterStore(),\n//         provideStoreDevtools({ maxAge: 25, logOnly: !isDevMode() }),\n//         provideServiceWorker('ngsw-worker.js', {\n//             enabled: !isDevMode(),\n//             registrationStrategy: 'registerWhenStable:30000',\n//         }),\n//         provideServiceWorker('ngsw-worker.js', {\n//             enabled: !isDevMode(),\n//             registrationStrategy: 'registerWhenStable:30000',\n//         }),\n//     ],\n// };","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}