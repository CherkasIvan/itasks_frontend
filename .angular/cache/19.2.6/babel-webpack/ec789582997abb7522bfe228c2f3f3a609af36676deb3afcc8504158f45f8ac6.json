{"ast":null,"code":"import { HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\nimport { select, Store } from '@ngrx/store';\nimport * as fromRoot from '../redux';\nimport { first, flatMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nexport let ProjectInterceptor = /*#__PURE__*/(() => {\n  class ProjectInterceptor {\n    constructor(store) {\n      this.store = store;\n    }\n    intercept(request, next) {\n      return this.store.pipe(select(fromRoot.getProjectSelectedId), first(), flatMap(projectId => {\n        const projectReq = !!projectId ? request.clone({\n          setParams: {\n            projectId: projectId\n          }\n        }) : request;\n        return next.handle(projectReq);\n      }));\n    }\n    static #_ = (() => this.ɵfac = function ProjectInterceptor_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ProjectInterceptor)(i0.ɵɵinject(i1.Store));\n    })();\n    static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ProjectInterceptor,\n      factory: ProjectInterceptor.ɵfac\n    }))();\n  }\n  return ProjectInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}