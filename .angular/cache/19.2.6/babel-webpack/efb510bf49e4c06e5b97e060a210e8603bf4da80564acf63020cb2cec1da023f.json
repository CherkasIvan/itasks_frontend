{
  "ast": null,
  "code": "import { ApiService } from './api.service';\nimport { InviteModel } from '../models/invite.model';\nimport 'rxjs';\nimport { IdentityModel } from '@core/models/identity.model';\nimport * as i0 from \"@angular/core\";\nexport let InviteService = /*#__PURE__*/(() => {\n  class InviteService extends ApiService {\n    findAll(params) {\n      return this.http.get(this.getApiUrl(`invites`), {\n        params: params\n      }).map(response => response.map(model => new InviteModel().setAttributes(model)));\n    }\n    confirmation(token) {\n      return this.http.get(this.getApiUrl(`invites/confirmation/${token}`)).map(response => new IdentityModel().setAttributes(response));\n    }\n    create(model) {\n      return this.http.post(this.getApiUrl(`invites`), model).map(response => new InviteModel().setAttributes(response));\n    }\n    resend(id) {\n      return this.http.put(this.getApiUrl(`invites/resend-email/${id}`), {});\n    }\n    save(model) {\n      return this.http.put(this.getApiUrl(`invites/${model.id}`), model).map(response => new InviteModel().setAttributes(response));\n    }\n    delete(id) {\n      return this.http.delete(this.getApiUrl(`invites/${id}`)).map(response => new InviteModel().setAttributes(response));\n    }\n    findAllRoles() {\n      return [{\n        id: 'user',\n        name: 'Пользователь'\n      }, {\n        id: 'admin',\n        name: 'Администратор'\n      }];\n    }\n    static #_ = (() => this.ɵfac = /*@__PURE__*/(() => {\n      let ɵInviteService_BaseFactory;\n      return function InviteService_Factory(__ngFactoryType__) {\n        return (ɵInviteService_BaseFactory || (ɵInviteService_BaseFactory = i0.ɵɵgetInheritedFactory(InviteService)))(__ngFactoryType__ || InviteService);\n      };\n    })())();\n    static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: InviteService,\n      factory: InviteService.ɵfac,\n      providedIn: 'root'\n    }))();\n  }\n  return InviteService;\n})();",
  "map": null,
  "metadata": {},
  "sourceType": "module",
  "externalDependencies": []
}
