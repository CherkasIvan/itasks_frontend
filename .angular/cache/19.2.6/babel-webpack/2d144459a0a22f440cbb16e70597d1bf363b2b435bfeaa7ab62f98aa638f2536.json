{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { of } from 'rxjs/observable/of';\nimport { TaskService } from '@core/services/task.service';\nimport { CreateFailureAction, CreateSuccessAction, TaskActionTypes, SaveFailureAction, SaveSuccessAction, SearchFailureAction, SearchSuccessAction, OrderSuccessAction, OrderFailureAction, FavoriteSuccessAction, FavoriteFailureAction, SearchFavoriteSuccessAction, SearchFavoriteFailureAction, FindOneSuccessAction, FindOneFailureAction, SearchNotificationSuccessAction, SearchNotificationFailureAction, ParticleSuccessAction, ParticleFailureAction, ArchiveSuccessAction, ArchiveFailureAction } from './task.actions';\nimport { Store } from '@ngrx/store';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@ngrx/effects\";\nimport * as i3 from \"@core/services/task.service\";\nexport class TaskEffects {\n  constructor(store, actions$, taskService) {\n    this.store = store;\n    this.actions$ = actions$;\n    this.taskService = taskService;\n    this.search$ = this.actions$.pipe(ofType(TaskActionTypes.SearchAction), map(action => action.payload), switchMap(query => {\n      return this.taskService.findAll(query).pipe(map(task => new SearchSuccessAction(task)), catchError(errors => of(new SearchFailureAction(errors))));\n    }));\n    this.searchParticle$ = this.actions$.pipe(ofType(TaskActionTypes.ParticleAction), map(action => action.payload), switchMap(query => {\n      return this.taskService.findAll(query).pipe(map(task => new ParticleSuccessAction(task)), catchError(errors => of(new ParticleFailureAction(errors))));\n    }));\n    this.searchNotification$ = this.actions$.pipe(ofType(TaskActionTypes.SearchNotificationAction), switchMap(() => {\n      return this.taskService.findAllNotification().pipe(map(task => new SearchNotificationSuccessAction(task)), catchError(errors => of(new SearchNotificationFailureAction(errors))));\n    }));\n    this.findOne$ = this.actions$.pipe(ofType(TaskActionTypes.FindOneAction), map(action => action.payload), switchMap(id => {\n      return this.taskService.findOne(id).pipe(map(task => new FindOneSuccessAction(task)), catchError(errors => of(new FindOneFailureAction(errors))));\n    }));\n    this.searchFavorite$ = this.actions$.pipe(ofType(TaskActionTypes.SearchFavoriteAction), switchMap(() => {\n      return this.taskService.findAllFavorite().pipe(map(task => new SearchFavoriteSuccessAction(task)), catchError(errors => of(new SearchFavoriteFailureAction(errors))));\n    }));\n    this.order$ = this.actions$.pipe(ofType(TaskActionTypes.OrderAction), map(action => action.payload), switchMap(model => {\n      return this.taskService.order(model).pipe(map(task => new OrderSuccessAction(task)), catchError(errors => of(new OrderFailureAction(errors))));\n    }));\n    this.save$ = this.actions$.pipe(ofType(TaskActionTypes.SaveAction), map(action => action.payload), switchMap(model => {\n      return this.taskService.save(model).pipe(map(task => new SaveSuccessAction(task)), catchError(errors => of(new SaveFailureAction(errors))));\n    }));\n    this.archive$ = this.actions$.pipe(ofType(TaskActionTypes.ArchiveAction), map(action => action.payload), switchMap(model => {\n      return this.taskService.save(model).pipe(map(task => new ArchiveSuccessAction(task)), catchError(errors => of(new ArchiveFailureAction(errors))));\n    }));\n    this.favorite$ = this.actions$.pipe(ofType(TaskActionTypes.FavoriteAction), map(action => action.payload), switchMap(model => {\n      return this.taskService.favorite(model).pipe(map(task => new FavoriteSuccessAction(task)), catchError(errors => of(new FavoriteFailureAction(errors))));\n    }));\n    this.create$ = this.actions$.pipe(ofType(TaskActionTypes.CreateAction), map(action => action.payload), switchMap(model => {\n      return this.taskService.create(model).pipe(switchMap(task => [\n      // new CloseTaskFormMenu(),\n      new CreateSuccessAction(task)]), catchError(errors => of(new CreateFailureAction(errors))));\n    }));\n  }\n  static #_ = (() => this.ɵfac = function TaskEffects_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TaskEffects)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.Actions), i0.ɵɵinject(i3.TaskService));\n  })();\n  static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TaskEffects,\n    factory: TaskEffects.ɵfac\n  }))();\n}\n__decorate([Effect(), __metadata(\"design:type\", Object)], TaskEffects.prototype, \"search$\", void 0);\n__decorate([Effect(), __metadata(\"design:type\", Object)], TaskEffects.prototype, \"searchParticle$\", void 0);\n__decorate([Effect(), __metadata(\"design:type\", Object)], TaskEffects.prototype, \"searchNotification$\", void 0);\n__decorate([Effect(), __metadata(\"design:type\", Object)], TaskEffects.prototype, \"findOne$\", void 0);\n__decorate([Effect(), __metadata(\"design:type\", Object)], TaskEffects.prototype, \"searchFavorite$\", void 0);\n__decorate([Effect(), __metadata(\"design:type\", Object)], TaskEffects.prototype, \"order$\", void 0);\n__decorate([Effect(), __metadata(\"design:type\", Object)], TaskEffects.prototype, \"save$\", void 0);\n__decorate([Effect(), __metadata(\"design:type\", Object)], TaskEffects.prototype, \"archive$\", void 0);\n__decorate([Effect(), __metadata(\"design:type\", Object)], TaskEffects.prototype, \"favorite$\", void 0);\n__decorate([Effect(), __metadata(\"design:type\", Object)], TaskEffects.prototype, \"create$\", void 0);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}