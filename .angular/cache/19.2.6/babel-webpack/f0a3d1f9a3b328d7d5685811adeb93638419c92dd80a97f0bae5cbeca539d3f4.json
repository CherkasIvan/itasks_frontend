{"ast":null,"code":"import { ActivatedRoute, Router } from \"@angular/router\";\nimport { select, Store } from \"@ngrx/store\";\nimport * as fromRoot from \"@core/redux\";\nimport * as _ from \"lodash\";\nimport * as TaskActions from \"@core/redux/task/task.actions\";\nimport { combineLatest } from \"rxjs/internal/observable/combineLatest\";\nimport { filter } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@angular/router\";\nexport let TaskQueryService = /*#__PURE__*/(() => {\n  class TaskQueryService {\n    set tagId(value) {\n      this._setArrayProperty(\"_tagId\", value);\n    }\n    set statusId(value) {\n      this._setArrayProperty(\"_statusId\", value);\n    }\n    get responsibleId() {\n      return this._responsibleId;\n    }\n    set responsibleId(value) {\n      this._setArrayProperty(\"_responsibleId\", value);\n    }\n    set authorId(value) {\n      this._setArrayProperty(\"_authorId\", value);\n    }\n    set limit(value) {\n      this._setProperty(\"_limit\", value);\n    }\n    set offset(value) {\n      this._setProperty(\"_offset\", value);\n    }\n    set isArchive(value) {\n      this._setProperty(\"_isArchive\", value);\n    }\n    set sort(value) {\n      this._setProperty(\"_sort\", value);\n    }\n    set expand(value) {\n      this._setArrayProperty(\"_expand\", value);\n    }\n    set fields(value) {\n      this._setArrayProperty(\"_fields\", value);\n    }\n    set text(value) {\n      this._setProperty(\"_text\", value);\n    }\n    constructor(store, router, route) {\n      this.store = store;\n      this.router = router;\n      this.route = route;\n      this._text = null;\n      this._fields = [];\n      this._expand = [];\n      this._isArchive = 0;\n      this._offset = 0;\n      this._limit = 20;\n      this._authorId = [];\n      this._responsibleId = [];\n      this._statusId = [];\n      this._tagId = [];\n      this._subscribeFetchTask();\n    }\n    /**\n     * Активный поиск по ответственному\n     *\n     * @param id\n     */\n    isActiveResponsible(id) {\n      return this._responsibleId.indexOf(id) > -1;\n    }\n    /**\n     * Добавить или удалить ответственного\n     * из фильтрации\n     *\n     * @param id\n     */\n    toggleResponsible(id) {\n      const index = this._responsibleId.indexOf(id);\n      if (index === -1) {\n        this._responsibleId.push(id);\n      } else {\n        this._responsibleId.splice(index, 1);\n      }\n      this.navigate();\n    }\n    /**\n     * Меняем состояние url\n     */\n    navigate() {\n      this.router.navigate([], {\n        relativeTo: this.route,\n        queryParams: this.getQuery()\n      });\n    }\n    /**\n     * Мапинг параметров\n     *\n     * @param params\n     */\n    load(params) {\n      this.responsibleId = params.hasOwnProperty(\"responsibleId\") ? params[\"responsibleId\"] : [];\n      this.authorId = params.hasOwnProperty(\"authorId\") ? params[\"authorId\"] : [];\n      this.statusId = params.hasOwnProperty(\"statusId\") ? params[\"statusId\"] : [];\n      this.tagId = params.hasOwnProperty(\"tagId\") ? params[\"tagId\"] : [];\n      this.text = params.hasOwnProperty(\"text\") ? params[\"text\"] : null;\n      this.isArchive = params.hasOwnProperty(\"isArchive\") ? +params[\"isArchive\"] : 0;\n      if (params.hasOwnProperty(\"sort\")) {\n        this.sort = params[\"sort\"];\n      } else if (this.router.url.indexOf(\"/load/list\") > 0) {\n        this.sort = \"-updatedAt\";\n      } else {\n        this.sort = \"board\";\n      }\n      return this;\n    }\n    /**\n     * Обновить стор\n     */\n    reload() {\n      this._fetchData();\n    }\n    /**\n     * Получить query для навигации\n     */\n    getQuery() {\n      const query = {};\n      if (this._responsibleId.length) {\n        query[\"responsibleId\"] = this._responsibleId.concat();\n      }\n      if (this._authorId.length) {\n        query[\"authorId\"] = this._authorId.concat();\n      }\n      if (this._statusId.length) {\n        query[\"statusId\"] = this._statusId.concat();\n      }\n      if (this._tagId.length) {\n        query[\"tagId\"] = this._tagId.concat();\n      }\n      if (this._fields.length) {\n        query[\"fields\"] = this._fields.concat();\n      }\n      if (this._expand.length) {\n        query[\"expand\"] = this._expand.concat();\n      }\n      if (this._text) {\n        query[\"text\"] = this._text;\n      }\n      if (this._isArchive) {\n        query[\"isArchive\"] = +this._isArchive;\n      }\n      if (this._sort) {\n        query[\"sort\"] = this._sort;\n      }\n      return query;\n    }\n    /**\n     * Загрузить данные в стор\n     * @private\n     */\n    _fetchData() {\n      this.store.dispatch(new TaskActions.SearchAction(this.getQuery()));\n    }\n    /**\n     * Задать проперти в виде массива\n     *\n     * @param property\n     * @param value\n     * @private\n     */\n    _setArrayProperty(property, value) {\n      if (isString(value)) {\n        value = [value];\n      }\n      if (!_.isEqual(this[property], value)) {\n        this[property].length = 0;\n        this[property].push(...value);\n      }\n    }\n    /**\n     * Задать проперти\n     *\n     * @param property\n     * @param value\n     * @private\n     */\n    _setProperty(property, value) {\n      if (this[property] !== value) {\n        this[property] = value;\n      }\n    }\n    /**\n     * Подписка на роутер и смену проекта для запуска получения задач\n     * @private\n     */\n    _subscribeFetchTask() {\n      const queryParams$ = this.route.queryParams;\n      const projectId$ = this.store.pipe(select(fromRoot.getProjectSelectedId), filter(_ => !!_));\n      const combined = combineLatest(queryParams$, projectId$);\n      combined.subscribe(([params, projectId]) => {\n        this.load(params);\n        this._fetchData();\n      });\n    }\n    static #_ = (() => this.ɵfac = function TaskQueryService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || TaskQueryService)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i2.ActivatedRoute));\n    })();\n    static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TaskQueryService,\n      factory: TaskQueryService.ɵfac,\n      providedIn: \"root\"\n    }))();\n  }\n  return TaskQueryService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}