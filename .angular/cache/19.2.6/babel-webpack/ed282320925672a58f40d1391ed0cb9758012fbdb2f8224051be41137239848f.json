{"ast":null,"code":"import { HttpRequest, HttpHandler, HttpEvent, HttpResponse, HttpErrorResponse } from '@angular/common/http';\nimport { Store } from '@ngrx/store';\nimport { Router } from '@angular/router';\nimport * as fromRoot from '@core/redux/index';\nimport 'rxjs/add/operator/do';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@angular/router\";\nexport let TokenInterceptor = /*#__PURE__*/(() => {\n  class TokenInterceptor {\n    constructor(store, router) {\n      this.store = store;\n      this.router = router;\n      this.store.select(fromRoot.getToken).subscribe(token => {\n        this.accessToken = token;\n      });\n    }\n    intercept(request, next) {\n      request = request.clone({\n        setParams: {\n          'access-token': this.accessToken\n        }\n      });\n      return next.handle(request).do(event => {\n        if (event instanceof HttpResponse) {\n          if (event.status === 302) {\n            console.error('[HttpRequest] Редирект');\n          }\n        }\n      }, err => {\n        if (err instanceof HttpErrorResponse) {\n          if (err.status === 401) {\n            console.error('[HttpRequest] Не авторизован');\n            // this.store.dispatch(new AuthActions.SignOutAction());\n            this.router.navigate(['/auth/sign-in']);\n          } else if (err.status === 403) {\n            console.error('[HttpRequest] Доступ запрещен');\n            // this.store.dispatch(new AuthActions.SignOutAction());\n            this.router.navigate(['/dashboard']);\n          }\n        }\n      });\n    }\n    static #_ = (() => this.ɵfac = function TokenInterceptor_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || TokenInterceptor)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.Router));\n    })();\n    static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TokenInterceptor,\n      factory: TokenInterceptor.ɵfac\n    }))();\n  }\n  return TokenInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}