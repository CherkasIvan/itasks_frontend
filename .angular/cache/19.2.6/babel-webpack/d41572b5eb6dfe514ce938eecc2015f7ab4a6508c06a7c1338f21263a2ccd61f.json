{"ast":null,"code":"import { HTTP_INTERCEPTORS, provideHttpClient, withFetch, withInterceptorsFromDi } from \"@angular/common/http\";\nimport { enableProdMode, importProvidersFrom } from \"@angular/core\";\nimport { BrowserModule, provideClientHydration, withHttpTransferCacheOptions } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule, provideAnimations } from \"@angular/platform-browser/animations\";\nimport { PreloadAllModules, RouterModule } from \"@angular/router\";\nimport { provideStore, StoreModule } from \"@ngrx/store\";\nimport { provideEffects } from \"@ngrx/effects\";\nimport { provideStoreDevtools } from \"@ngrx/store-devtools\";\n// import { SocketIoConfig } from \"ngx-socket-io\";\nimport { environment } from \"../environments/environment\";\nimport { reducers } from \"@core/redux/index\";\nimport { TokenInterceptor } from \"./auth/interceptors/token.interceptor\";\nimport { ProjectInterceptor } from \"@core/interceptors/project.interceptor\";\nimport { AuthEffects } from \"@core/redux/auth/auth.effects\";\nimport { ProjectEffects } from \"@core/redux/project/project.effects\";\nimport { TaskEffects } from \"@core/redux/task/task.effects\";\nimport { MessageEffects } from \"@core/redux/message/message.effects\";\nimport { StatusEffects } from \"@core/redux/status/status.effects\";\nimport { InviteEffects } from \"@core/redux/invite/invite.effects\";\nimport { TagEffects } from \"@core/redux/tag/tag.effects\";\nimport { FilterEffects } from \"@core/redux/filter/filter.effects\";\nimport { FileService } from \"@core/services/file.service\";\nimport { ApiService } from \"@core/services/api.service\";\nimport { TaskService } from \"@core/services/task.service\";\nimport { MessageService } from \"@core/services/message.service\";\nimport { StatusService } from \"@core/services/status.service\";\nimport { InviteService } from \"@core/services/invite.service\";\nimport { AuthGuardService } from \"@core/services/auth-guard.service\";\nimport { ProjectService } from \"@core/services/project.service\";\nimport { StoreTaskService } from \"@core/services/store-task.service\";\nimport { AuthService } from \"@core/services/auth.service\";\nimport { ImagePreviewPipe } from \"@ux/pipes/image-preview.pipe\";\nimport { TimeAgoPipe } from \"@ux/pipes/time-ago.pipe\";\nimport { registerLocaleData } from \"@angular/common\";\nimport localeRu from \"@angular/common/locales/ru\";\nimport { MAIN_ROUTES } from \"./app.routes\";\nimport { DeviceDetectorService } from \"ngx-device-detector\";\nregisterLocaleData(localeRu);\n// const socketConfig: SocketIoConfig = {\n//   url: \"http://localhost:3001\",\n//   options: {},\n// };\nif (environment.production) {\n  enableProdMode();\n}\nexport const appConfig = {\n  providers: [importProvidersFrom([BrowserModule, BrowserAnimationsModule, StoreModule.forRoot(reducers), RouterModule.forRoot(MAIN_ROUTES, {\n    preloadingStrategy: PreloadAllModules\n  })]), provideHttpClient(withInterceptorsFromDi(), withFetch()), provideAnimations(), provideAnimations(), provideStore(reducers, {\n    metaReducers\n  }), provideEffects([ProjectEffects, AuthEffects, StatusEffects, TaskEffects, MessageEffects, InviteEffects, TagEffects, FilterEffects]),\n  // SocketIoModule.forRoot(socketConfig), <== Марк там по сокетам я до конца не разобрался но либа поменялась\n  !environment.production ? provideStoreDevtools() : [], {\n    provide: HTTP_INTERCEPTORS,\n    useClass: TokenInterceptor,\n    multi: true\n  }, {\n    provide: HTTP_INTERCEPTORS,\n    useClass: ProjectInterceptor,\n    multi: true\n  }, FileService, ApiService, TaskService, MessageService, StatusService, InviteService, AuthGuardService, ProjectService, StoreTaskService, AuthService, ImagePreviewPipe, TimeAgoPipe, DeviceDetectorService, provideClientHydration(withHttpTransferCacheOptions({\n    includePostRequests: true\n  }))]\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}