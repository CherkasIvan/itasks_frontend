{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { catchError, switchMap, map } from 'rxjs/operators';\nimport { of } from 'rxjs/observable/of';\nimport { CreateFailureAction, CreateSuccessAction, DeleteSuccessAction, FilterActionTypes, SaveFailureAction, SaveSuccessAction, SearchFailureAction, SearchSuccessAction } from './filter.actions';\nimport { Store } from '@ngrx/store';\nimport { FilterApiService } from '@core/services/api/filter.api.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@ngrx/effects\";\nimport * as i3 from \"@core/services/api/filter.api.service\";\nexport class FilterEffects {\n  constructor(store, actions$, filterService) {\n    this.store = store;\n    this.actions$ = actions$;\n    this.filterService = filterService;\n    this.search$ = this.actions$.pipe(ofType(FilterActionTypes.SearchAction), switchMap(() => {\n      return this.filterService.findAll().pipe(map(filters => new SearchSuccessAction(filters)), catchError(errors => of(new SearchFailureAction(errors))));\n    }));\n    this.save$ = this.actions$.pipe(ofType(FilterActionTypes.SaveAction), map(action => action.payload), switchMap(model => {\n      return this.filterService.save(model).pipe(map(filter => new SaveSuccessAction(filter)), catchError(errors => of(new SaveFailureAction(errors))));\n    }));\n    this.create$ = this.actions$.pipe(ofType(FilterActionTypes.CreateAction), map(action => action.payload), switchMap(model => {\n      return this.filterService.create(model).pipe(map(filter => new CreateSuccessAction(filter)), catchError(errors => of(new CreateFailureAction(errors))));\n    }));\n    this.delete$ = this.actions$.pipe(ofType(FilterActionTypes.DeleteAction), map(action => action.payload), switchMap(model => {\n      return this.filterService.delete(model).pipe(map(_ => new DeleteSuccessAction(model)), catchError(errors => of(new SaveFailureAction(errors))));\n    }));\n  }\n  static #_ = (() => this.ɵfac = function FilterEffects_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || FilterEffects)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.Actions), i0.ɵɵinject(i3.FilterApiService));\n  })();\n  static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FilterEffects,\n    factory: FilterEffects.ɵfac\n  }))();\n}\n__decorate([Effect(), __metadata(\"design:type\", Object)], FilterEffects.prototype, \"search$\", void 0);\n__decorate([Effect(), __metadata(\"design:type\", Object)], FilterEffects.prototype, \"save$\", void 0);\n__decorate([Effect(), __metadata(\"design:type\", Object)], FilterEffects.prototype, \"create$\", void 0);\n__decorate([Effect(), __metadata(\"design:type\", Object)], FilterEffects.prototype, \"delete$\", void 0);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}