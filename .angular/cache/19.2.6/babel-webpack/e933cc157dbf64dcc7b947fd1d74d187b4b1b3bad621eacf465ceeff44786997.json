{"ast":null,"code":"import { Actions, createEffect, ofType } from \"@ngrx/effects\";\nimport { catchError, map, switchMap } from \"rxjs/operators\";\nimport { of } from \"rxjs\";\nimport { Store } from \"@ngrx/store\";\nimport { CreateFailureAction, CreateSuccessAction, DeleteFailureAction, DeleteSuccessAction, InviteActionTypes, ResendEmailFailureAction, ResendEmailSuccessAction, SaveFailureAction, SaveSuccessAction, SearchFailureAction, SearchSuccessAction } from \"./invite.actions\";\nimport { InviteService } from \"../../services/invite.service\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@ngrx/effects\";\nimport * as i3 from \"../../services/invite.service\";\nexport let InviteEffects = /*#__PURE__*/(() => {\n  class InviteEffects {\n    constructor(store, actions$, inviteService) {\n      this.store = store;\n      this.actions$ = actions$;\n      this.inviteService = inviteService;\n      this.search$ = createEffect(() => this.actions$.pipe(ofType(InviteActionTypes.SearchAction), map(action => action.payload), switchMap(params => {\n        return this.inviteService.findAll(params).pipe(map(invites => new SearchSuccessAction(invites)), catchError(errors => of(new SearchFailureAction(errors))));\n      })));\n      this.resendEmail$ = createEffect(() => this.actions$.pipe(ofType(InviteActionTypes.ResendEmailAction), map(action => action.payload), switchMap(id => {\n        return this.inviteService.resend(id).pipe(map(_ => new ResendEmailSuccessAction()), catchError(errors => of(new ResendEmailFailureAction(errors))));\n      })));\n      this.create$ = createEffect(() => this.actions$.pipe(ofType(InviteActionTypes.CreateAction), map(action => action.payload), switchMap(params => {\n        return this.inviteService.create(params).pipe(map(invite => new CreateSuccessAction(invite)), catchError(errors => of(new CreateFailureAction(errors))));\n      })));\n      this.save$ = createEffect(() => this.actions$.pipe(ofType(InviteActionTypes.SaveAction), map(action => action.payload), switchMap(params => {\n        return this.inviteService.save(params).pipe(map(invite => new SaveSuccessAction(invite)), catchError(errors => of(new SaveFailureAction(errors))));\n      })));\n      this.delete$ = createEffect(() => this.actions$.pipe(ofType(InviteActionTypes.DeleteAction), map(action => action.payload), switchMap(id => {\n        return this.inviteService.delete(id).pipe(map(invite => new DeleteSuccessAction(invite)), catchError(errors => of(new DeleteFailureAction(errors))));\n      })));\n    }\n    static #_ = (() => this.ɵfac = function InviteEffects_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || InviteEffects)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.Actions), i0.ɵɵinject(i3.InviteService));\n    })();\n    static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: InviteEffects,\n      factory: InviteEffects.ɵfac\n    }))();\n  }\n  return InviteEffects;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}