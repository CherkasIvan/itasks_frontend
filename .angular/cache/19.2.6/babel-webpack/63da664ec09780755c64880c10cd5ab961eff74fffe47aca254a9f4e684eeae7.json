{"ast":null,"code":"import { Actions, ofType } from \"@ngrx/effects\";\nimport { catchError, map, switchMap } from \"rxjs/operators\";\nimport { of } from \"rxjs\";\nimport { TagService } from \"../../services/tag.service\";\nimport { CreateFailureAction, CreateSuccessAction, DeleteSuccessAction, SaveFailureAction, SaveSuccessAction, SearchFailureAction, SearchSuccessAction, TagActionTypes } from \"./tag.actions\";\nimport { Store } from \"@ngrx/store\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@ngrx/effects\";\nimport * as i3 from \"../../services/tag.service\";\nexport let TagEffects = /*#__PURE__*/(() => {\n  class TagEffects {\n    constructor(store, actions$, tagService) {\n      this.store = store;\n      this.actions$ = actions$;\n      this.tagService = tagService;\n      this.search$ = this.actions$.pipe(ofType(TagActionTypes.SearchAction), switchMap(() => {\n        return this.tagService.findAll().pipe(map(tag => new SearchSuccessAction(tag)), catchError(errors => of(new SearchFailureAction(errors))));\n      }));\n      this.save$ = this.actions$.pipe(ofType(TagActionTypes.SaveAction), map(action => action.payload), switchMap(model => {\n        return this.tagService.save(model).pipe(map(tag => new SaveSuccessAction(tag)), catchError(errors => of(new SaveFailureAction(errors))));\n      }));\n      this.create$ = this.actions$.pipe(ofType(TagActionTypes.CreateAction), map(action => action.payload), switchMap(model => {\n        return this.tagService.create(model).pipe(map(tag => new CreateSuccessAction(tag)), catchError(errors => of(new CreateFailureAction(errors))));\n      }));\n      this.delete$ = this.actions$.pipe(ofType(TagActionTypes.DeleteAction), map(action => action.payload), switchMap(model => {\n        return this.tagService.delete(model).pipe(map(_ => new DeleteSuccessAction(model.id)), catchError(errors => of(new SaveFailureAction(errors))));\n      }));\n    }\n    static #_ = (() => this.ɵfac = function TagEffects_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || TagEffects)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.Actions), i0.ɵɵinject(i3.TagService));\n    })();\n    static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TagEffects,\n      factory: TagEffects.ɵfac\n    }))();\n  }\n  return TagEffects;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}