{"ast":null,"code":"import { ApiService } from \"./api.service\";\nimport { ProjectModel } from \"../models/project.model\";\nimport { map } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nexport let ProjectService = /*#__PURE__*/(() => {\n  class ProjectService extends ApiService {\n    findAll() {\n      return this.http.get(this.getApiUrl(`projects`)).pipe(map(response => response.map(model => new ProjectModel().setAttributes(model)))); // Используйте pipe и map\n    }\n    save(model) {\n      return this.http.put(this.getApiUrl(`projects/${model.id}`), model).pipe(map(response => new ProjectModel().setAttributes(response))); // Используйте pipe и map\n    }\n    create(model) {\n      return this.http.post(this.getApiUrl(`projects`), model).pipe(map(response => new ProjectModel().setAttributes(response))); // Используйте pipe и map\n    }\n    delete(model) {\n      return this.http.delete(this.getApiUrl(`projects/${model.id}`)).pipe(map(response => new ProjectModel().setAttributes(response))); // Используйте pipe и map\n    }\n    restore(model) {\n      return this.http.put(this.getApiUrl(`projects/restore/${model.id}`), {}).pipe(map(response => new ProjectModel().setAttributes(response))); // Используйте pipe и map\n    }\n    static #_ = (() => this.ɵfac = /*@__PURE__*/(() => {\n      let ɵProjectService_BaseFactory;\n      return function ProjectService_Factory(__ngFactoryType__) {\n        return (ɵProjectService_BaseFactory || (ɵProjectService_BaseFactory = i0.ɵɵgetInheritedFactory(ProjectService)))(__ngFactoryType__ || ProjectService);\n      };\n    })())();\n    static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ProjectService,\n      factory: ProjectService.ɵfac,\n      providedIn: \"root\"\n    }))();\n  }\n  return ProjectService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}