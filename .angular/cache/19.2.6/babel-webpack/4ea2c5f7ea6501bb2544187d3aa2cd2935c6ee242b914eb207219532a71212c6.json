{
  "ast": null,
  "code": "import 'rxjs';\nimport { select, Store } from '@ngrx/store';\nimport * as fromRoot from '../redux';\nimport 'rxjs/add/observable/combineLatest';\nimport * as _ from 'lodash';\nimport { combineLatest } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nexport let StoreMessageService = /*#__PURE__*/(() => {\n  class StoreMessageService {\n    constructor(store) {\n      this.store = store;\n      this.limitVisible = 15;\n    }\n    /**\n     * Список сообщений для чата в разрезе задачи\n     */\n    getMessagesByTaskId(taskId) {\n      const messageList$ = this.store.pipe(select(fromRoot.getMessageEntitiesByTask(taskId)));\n      const inviteList$ = this.store.pipe(select(fromRoot.getInviteEntities));\n      return combineLatest(messageList$, inviteList$).pipe(filter(([messages, invites]) => invites.length > 0), map(([messages, invites]) => {\n        messages.forEach(message => {\n          message.invite = _.find(invites, {\n            userId: message.authorId\n          });\n        });\n        const messageList = messages.slice(-this.limitVisible);\n        const messageListHide = messages.length > this.limitVisible ? messages.slice(0, messages.length - this.limitVisible) : [];\n        const messageListPinned = messages.filter(item => item.isPin === true);\n        return {\n          messageList: messageList,\n          messageListHide: messageListHide,\n          messageListPinned: messageListPinned\n        };\n      }));\n    }\n    static #_ = (() => this.ɵfac = function StoreMessageService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || StoreMessageService)(i0.ɵɵinject(i1.Store));\n    })();\n    static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: StoreMessageService,\n      factory: StoreMessageService.ɵfac,\n      providedIn: 'root'\n    }))();\n  }\n  return StoreMessageService;\n})();",
  "map": null,
  "metadata": {},
  "sourceType": "module",
  "externalDependencies": []
}
