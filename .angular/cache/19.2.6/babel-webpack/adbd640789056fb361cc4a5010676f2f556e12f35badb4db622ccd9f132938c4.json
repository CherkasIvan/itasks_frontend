{"ast":null,"code":"import { Actions, createEffect, ofType } from \"@ngrx/effects\";\nimport { catchError, map, switchMap } from \"rxjs/operators\";\nimport { of } from \"rxjs\";\nimport { TaskService } from \"@core/services/task.service\";\nimport { CreateAction, CreateFailureAction, CreateSuccessAction, TaskActionTypes, SearchFailureAction, SearchSuccessAction, OrderAction, OrderSuccessAction, OrderFailureAction, FavoriteAction, FavoriteSuccessAction, FavoriteFailureAction, SearchFavoriteSuccessAction, SearchFavoriteFailureAction, FindOneAction, FindOneSuccessAction, FindOneFailureAction, SearchNotificationSuccessAction, SearchNotificationFailureAction, SearchAction, ParticleAction, ParticleSuccessAction, ParticleFailureAction, ArchiveAction, ArchiveSuccessAction, ArchiveFailureAction } from \"./task.actions\";\nimport { Store } from \"@ngrx/store\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@ngrx/effects\";\nexport let TaskEffects = /*#__PURE__*/(() => {\n  class TaskEffects {\n    constructor(store, actions$, taskService) {\n      this.store = store;\n      this.actions$ = actions$;\n      this.taskService = taskService;\n      this.search$ = createEffect(() => this.actions$.pipe(ofType(TaskActionTypes.SearchAction), map(action => action.payload), switchMap(query => {\n        return this.taskService.findAll(query).pipe(map(task => new SearchSuccessAction(task)), catchError(errors => of(new SearchFailureAction(errors))));\n      })));\n      this.searchParticle$ = createEffect(() => this.actions$.pipe(ofType(TaskActionTypes.ParticleAction), map(action => action.payload), switchMap(query => {\n        return this.taskService.findAll(query).pipe(map(task => new ParticleSuccessAction(task)), catchError(errors => of(new ParticleFailureAction(errors))));\n      })));\n      this.searchNotification$ = createEffect(() => this.actions$.pipe(ofType(TaskActionTypes.SearchNotificationAction), switchMap(() => {\n        return this.taskService.findAllNotification().pipe(map(task => new SearchNotificationSuccessAction(task)), catchError(errors => of(new SearchNotificationFailureAction(errors))));\n      })));\n      this.findOne$ = createEffect(() => this.actions$.pipe(ofType(TaskActionTypes.FindOneAction), map(action => action.payload), switchMap(id => {\n        return this.taskService.findOne(id).pipe(map(task => new FindOneSuccessAction(task)), catchError(errors => of(new FindOneFailureAction(errors))));\n      })));\n      this.searchFavorite$ = createEffect(() => this.actions$.pipe(ofType(TaskActionTypes.SearchFavoriteAction), switchMap(() => {\n        return this.taskService.findAllFavorite().pipe(map(task => new SearchFavoriteSuccessAction(task)), catchError(errors => of(new SearchFavoriteFailureAction(errors))));\n      })));\n      this.order$ = createEffect(() => this.actions$.pipe(ofType(TaskActionTypes.OrderAction), map(action => action.payload), switchMap(model => {\n        return this.taskService.order(model).pipe(map(task => new OrderSuccessAction(task)), catchError(errors => of(new OrderFailureAction(errors))));\n      })));\n      this.archive$ = createEffect(() => this.actions$.pipe(ofType(TaskActionTypes.ArchiveAction), map(action => action.payload), switchMap(model => {\n        return this.taskService.save(model).pipe(map(task => new ArchiveSuccessAction(task)), catchError(errors => of(new ArchiveFailureAction(errors))));\n      })));\n      this.favorite$ = createEffect(() => this.actions$.pipe(ofType(TaskActionTypes.FavoriteAction), map(action => action.payload), switchMap(model => {\n        return this.taskService.favorite(model).pipe(map(task => new FavoriteSuccessAction(task)), catchError(errors => of(new FavoriteFailureAction(errors))));\n      })));\n      this.create$ = createEffect(() => this.actions$.pipe(ofType(TaskActionTypes.CreateAction), map(action => action.payload), switchMap(model => {\n        return this.taskService.create(model).pipe(switchMap(task => [\n        // new CloseTaskFormMenu(),\n        new CreateSuccessAction(task)]), catchError(errors => of(new CreateFailureAction(errors))));\n      })));\n    }\n    static #_ = (() => this.ɵfac = function TaskEffects_Factory(__ngFactoryType__) {\n      i0.ɵɵinvalidFactory();\n    })();\n    static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TaskEffects,\n      factory: TaskEffects.ɵfac\n    }))();\n  }\n  return TaskEffects;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}