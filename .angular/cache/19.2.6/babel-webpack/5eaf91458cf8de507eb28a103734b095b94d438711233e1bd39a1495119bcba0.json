{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { of } from 'rxjs/observable/of';\nimport { StatusService } from '../../services/status.service';\nimport { CreateFailureAction, CreateSuccessAction, StatusActionTypes, SaveFailureAction, SaveSuccessAction, SearchFailureAction, SearchSuccessAction, SortSuccessAction, SortFailureAction, DeleteSuccessAction, DeleteFailureAction } from './status.actions';\nimport { Store } from '@ngrx/store';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@ngrx/effects\";\nimport * as i3 from \"../../services/status.service\";\nexport class StatusEffects {\n  constructor(store, actions$, statusService) {\n    this.store = store;\n    this.actions$ = actions$;\n    this.statusService = statusService;\n    this.search$ = this.actions$.pipe(ofType(StatusActionTypes.SearchAction), switchMap(() => {\n      return this.statusService.findAll().pipe(map(status => new SearchSuccessAction(status)), catchError(errors => of(new SearchFailureAction(errors))));\n    }));\n    this.save$ = this.actions$.pipe(ofType(StatusActionTypes.SaveAction), map(action => action.payload), switchMap(model => {\n      return this.statusService.save(model).pipe(map(status => new SaveSuccessAction(status)), catchError(errors => of(new SaveFailureAction(errors))));\n    }));\n    this.create$ = this.actions$.pipe(ofType(StatusActionTypes.CreateAction), map(action => action.payload), switchMap(model => {\n      return this.statusService.create(model).pipe(map(status => new CreateSuccessAction(status)), catchError(errors => of(new CreateFailureAction(errors))));\n    }));\n    this.sort$ = this.actions$.pipe(ofType(StatusActionTypes.SortAction), map(action => action.payload), switchMap(model => {\n      return this.statusService.sort(model).pipe(map(status => new SortSuccessAction(status)), catchError(errors => of(new SortFailureAction(errors))));\n    }));\n    this.delete$ = this.actions$.pipe(ofType(StatusActionTypes.DeleteAction), map(action => action.payload), switchMap(model => {\n      return this.statusService.delete(model).pipe(map(() => new DeleteSuccessAction(model.id)), catchError(errors => of(new DeleteFailureAction(errors))));\n    }));\n  }\n  static #_ = (() => this.ɵfac = function StatusEffects_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || StatusEffects)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.Actions), i0.ɵɵinject(i3.StatusService));\n  })();\n  static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StatusEffects,\n    factory: StatusEffects.ɵfac\n  }))();\n}\n__decorate([Effect(), __metadata(\"design:type\", Object)], StatusEffects.prototype, \"search$\", void 0);\n__decorate([Effect(), __metadata(\"design:type\", Object)], StatusEffects.prototype, \"save$\", void 0);\n__decorate([Effect(), __metadata(\"design:type\", Object)], StatusEffects.prototype, \"create$\", void 0);\n__decorate([Effect(), __metadata(\"design:type\", Object)], StatusEffects.prototype, \"sort$\", void 0);\n__decorate([Effect(), __metadata(\"design:type\", Object)], StatusEffects.prototype, \"delete$\", void 0);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}