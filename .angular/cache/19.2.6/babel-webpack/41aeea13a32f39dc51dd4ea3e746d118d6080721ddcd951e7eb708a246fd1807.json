{"ast":null,"code":"import { createSelector } from \"@ngrx/store\";\nimport { createEntityAdapter } from \"@ngrx/entity\";\nimport { InviteActionTypes } from \"./invite.actions\";\nimport * as _ from \"lodash\";\nexport const adapter = createEntityAdapter({\n  selectId: status => status.id,\n  sortComparer: false\n});\nexport const initialState = adapter.getInitialState({\n  ids: [],\n  loading: false,\n  entities: {},\n  errors: {}\n});\nexport function reducer(state = initialState, action) {\n  switch (action.type) {\n    case InviteActionTypes.SetOnlineAction:\n      {\n        const change = [];\n        action.payload.forEach(item => {\n          const invite = _.find(state.entities, {\n            userId: item.id\n          });\n          if (invite) {\n            invite.user.activityAt = item.activityAt;\n            change.push({\n              id: invite.id,\n              changes: invite\n            });\n          }\n        });\n        return adapter.updateMany(change, state);\n      }\n    case InviteActionTypes.SearchAction:\n      {\n        return Object.assign({}, state, {\n          loading: true\n        });\n      }\n    case InviteActionTypes.SearchSuccessAction:\n      {\n        return adapter.addMany(action.payload, Object.assign({}, state, {\n          loading: false\n        }));\n      }\n    case InviteActionTypes.DeleteSuccessAction:\n      {\n        const change = {\n          id: action.payload.id,\n          changes: action.payload\n        };\n        return adapter.updateOne(change, Object.assign({}, state, {\n          loading: false\n        }));\n      }\n    case InviteActionTypes.CreateAction:\n      {\n        return Object.assign({}, state, {\n          loading: true\n        });\n      }\n    case InviteActionTypes.CreateSuccessAction:\n      {\n        // const change: Update<InviteModel> = {id: action.payload.id, changes: action.payload};\n        return adapter.upsertOne(action.payload, Object.assign({}, state, {\n          loading: false,\n          errors: {}\n        }));\n      }\n    case InviteActionTypes.CreateFailureAction:\n      {\n        return Object.assign({}, state, {\n          errors: action.payload.error,\n          loading: false\n        });\n      }\n    case InviteActionTypes.SaveSuccessAction:\n      {\n        const change = {\n          id: action.payload.id,\n          changes: action.payload\n        };\n        return adapter.updateOne(change, Object.assign({}, state, {\n          loading: false\n        }));\n      }\n    case InviteActionTypes.SaveAction:\n      {\n        return Object.assign({}, state, {\n          loading: true\n        });\n      }\n    case InviteActionTypes.SaveFailureAction:\n      {\n        return Object.assign({}, state, {\n          errors: action.payload.error,\n          loading: false\n        });\n      }\n    case InviteActionTypes.ResendEmailAction:\n      {\n        return Object.assign({}, state, {\n          loading: true\n        });\n      }\n    case InviteActionTypes.ResendEmailSuccessAction:\n      {\n        return Object.assign({}, state, {\n          loading: false\n        });\n      }\n    case InviteActionTypes.ResendEmailFailureAction:\n      {\n        return Object.assign({}, state, {\n          loading: false\n        });\n      }\n    default:\n      return state;\n  }\n}\nexport const getEntities = state => state.entities;\nexport const getIds = state => state.ids;\nexport const getLoading = state => state.loading;\nexport const getErrors = state => state.errors;\nexport const getEntitiesArray = createSelector(getEntities, getIds, (entities, ids) => ids.map(id => entities[id]));\nexport const getEntitiesNoDelete = createSelector(getEntitiesArray, entities => entities.filter(item => item.status !== \"delete\"));\nexport const getEntitiesActive = createSelector(getEntitiesArray, entities => entities.filter(item => item.status === \"active\"));","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}