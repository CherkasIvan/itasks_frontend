{"ast":null,"code":"import { Actions, createEffect, ofType } from \"@ngrx/effects\";\nimport { catchError, map, switchMap } from \"rxjs/operators\";\nimport { of } from \"rxjs\";\nimport { CreateFailureAction, CreateSuccessAction, DeleteSuccessAction, LikeFailureAction, LikeSuccessAction, MessageActionTypes, PinFailureAction, PinSuccessAction, SaveFailureAction, SaveSuccessAction, SearchFailureAction, SearchSuccessAction } from \"./message.actions\";\nimport { Store } from \"@ngrx/store\";\nimport { MessageService } from \"../../services/message.service\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@ngrx/effects\";\nimport * as i3 from \"../../services/message.service\";\nexport let MessageEffects = /*#__PURE__*/(() => {\n  class MessageEffects {\n    constructor(store, actions$, messageService) {\n      this.store = store;\n      this.actions$ = actions$;\n      this.messageService = messageService;\n      this.search$ = createEffect(() => this.actions$.pipe(ofType(MessageActionTypes.SearchAction), map(action => action.payload), switchMap(taskId => {\n        return this.messageService.findAll(taskId).pipe(map(message => new SearchSuccessAction(message)), catchError(errors => of(new SearchFailureAction(errors))));\n      })));\n      this.save$ = createEffect(() => this.actions$.pipe(ofType(MessageActionTypes.SaveAction), map(action => action.payload), switchMap(model => {\n        return this.messageService.save(model).pipe(map(message => new SaveSuccessAction(message)), catchError(errors => of(new SaveFailureAction(errors))));\n      })));\n      this.create$ = createEffect(() => this.actions$.pipe(ofType(MessageActionTypes.CreateAction), map(action => action.payload), switchMap(model => {\n        return this.messageService.create(model).pipe(map(message => new CreateSuccessAction(message)), catchError(errors => of(new CreateFailureAction(errors))));\n      })));\n      this.like$ = createEffect(() => this.actions$.pipe(ofType(MessageActionTypes.LikeAction), map(action => action.payload), switchMap(model => {\n        return this.messageService.like(model).pipe(map(message => new LikeSuccessAction(message)), catchError(errors => of(new LikeFailureAction(errors))));\n      })));\n      this.pin$ = createEffect(() => this.actions$.pipe(ofType(MessageActionTypes.PinAction), map(action => action.payload), switchMap(model => {\n        return this.messageService.pin(model).pipe(map(message => new PinSuccessAction(message)), catchError(errors => of(new PinFailureAction(errors))));\n      })));\n      this.delete$ = createEffect(() => this.actions$.pipe(ofType(MessageActionTypes.DeleteAction), map(action => action.payload), switchMap(model => {\n        return this.messageService.destroy(model).pipe(map(() => new DeleteSuccessAction(model)), catchError(errors => of(new CreateFailureAction(errors))));\n      })));\n    }\n    static #_ = (() => this.ɵfac = function MessageEffects_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MessageEffects)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.Actions), i0.ɵɵinject(i3.MessageService));\n    })();\n    static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: MessageEffects,\n      factory: MessageEffects.ɵfac\n    }))();\n  }\n  return MessageEffects;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}