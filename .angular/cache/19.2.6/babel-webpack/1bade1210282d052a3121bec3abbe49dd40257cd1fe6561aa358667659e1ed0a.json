{"ast":null,"code":"import { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { combineLatest } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport * as fromRoot from '@core/redux/index';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@ngrx/store\";\nexport let AuthGuardService = /*#__PURE__*/(() => {\n  class AuthGuardService {\n    constructor(router, store) {\n      this.router = router;\n      this.store = store;\n    }\n    canActivate(route, state) {\n      const isAuth$ = this.store.select(fromRoot.getIsAuth);\n      const authStep$ = this.store.select(fromRoot.getStep);\n      const url = state.url;\n      const step1 = '/auth/sign-up/step-1';\n      const step2 = '/auth/sign-up/step-2';\n      const step3 = '/auth/sign-up/step-3';\n      const step4 = '/auth/sign-up/step-4';\n      const combined = combineLatest(isAuth$, authStep$);\n      return combined.pipe(map(([isAuth, authStep]) => {\n        if (!isAuth) {\n          this.router.navigate(['/auth/sign-in']);\n          return false;\n        }\n        if (authStep === 'end') {\n          return true;\n        }\n        if (authStep === 'personalData' && url !== step1) {\n          this.router.navigate([step1]);\n          return false;\n        }\n        if (authStep === 'security' && url !== step2) {\n          this.router.navigate([step2]);\n          return false;\n        }\n        if (authStep === 'questions' && url !== step3) {\n          this.router.navigate([step3]);\n          return false;\n        }\n        return true;\n      }), take(1));\n    }\n    static #_ = (() => this.ɵfac = function AuthGuardService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthGuardService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.Store));\n    })();\n    static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthGuardService,\n      factory: AuthGuardService.ɵfac,\n      providedIn: 'root'\n    }))();\n  }\n  return AuthGuardService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}