{"ast":null,"code":"import { createSelector } from '@ngrx/store';\nimport { createEntityAdapter } from '@ngrx/entity';\nimport { TaskActionTypes } from './task.actions';\nimport * as _ from 'lodash';\nexport const adapter = createEntityAdapter({\n  selectId: task => task.id,\n  sortComparer: false\n});\nexport const initialState = adapter.getInitialState({\n  idsFavorites: [],\n  idsNotifications: [],\n  ids: [],\n  loading: false,\n  loadingOrder: false,\n  selectedIdUpdateItem: null,\n  openId: null,\n  entities: {}\n});\nexport function reducer(state = initialState, action) {\n  switch (action.type) {\n    case TaskActionTypes.TaskClearAction:\n      {\n        const allowIds = [...state.idsFavorites, ...state.idsNotifications];\n        const entities = state.entities;\n        const filtered = Object.keys(entities).filter(key => allowIds.includes(key)).reduce((obj, key) => {\n          obj[key] = entities[key];\n          return obj;\n        }, {});\n        return {\n          ...initialState,\n          idsFavorites: state.idsFavorites,\n          idsNotifications: state.idsNotifications,\n          entities: filtered\n        };\n      }\n    case TaskActionTypes.SearchFavoriteSuccessAction:\n      {\n        const newEntities = action.payload.filter(entity => !state.entities[entity.id]).reduce((entities, entity) => {\n          return Object.assign(entities, {\n            [entity.id]: entity\n          });\n        }, {});\n        return Object.assign({}, state, {\n          idsFavorites: action.payload.map(entity => entity.id),\n          entities: Object.assign({}, state.entities, newEntities)\n        });\n      }\n    case TaskActionTypes.SearchNotificationSuccessAction:\n      {\n        const entitiesNew = action.payload.reduce((entities, entity) => {\n          return Object.assign(entities, {\n            [entity.id]: entity\n          });\n        }, {});\n        return Object.assign({}, state, {\n          idsNotifications: action.payload.map(entity => entity.id),\n          entities: Object.assign({}, state.entities, entitiesNew)\n        });\n      }\n    case TaskActionTypes.UpdateNotificationAction:\n      {\n        const model = action.payload;\n        const index = state.idsNotifications.indexOf(model.id);\n        const ids = state.idsNotifications;\n        if (index > -1) {\n          ids.splice(index, 1);\n          ids.unshift(model.id);\n        } else {\n          ids.unshift(model.id);\n        }\n        return Object.assign({}, state, {\n          idsNotifications: ids,\n          entities: Object.assign({}, state.entities, {\n            [model.id]: model\n          })\n        });\n      }\n    case TaskActionTypes.ClearNotificationsAction:\n      {\n        return Object.assign({}, state, {\n          entities: Object.assign({}, state.entities, {\n            [action.payload.id]: action.payload\n          }),\n          loading: false\n        });\n      }\n    case TaskActionTypes.SearchSuccessAction:\n      {\n        const newEntities = action.payload.reduce((entities, entity) => {\n          return Object.assign(entities, {\n            [entity.id]: entity\n          });\n        }, {});\n        return Object.assign({}, state, {\n          ids: action.payload.map(entity => entity.id),\n          entities: Object.assign({}, state.entities, newEntities),\n          loading: false\n        });\n      }\n    case TaskActionTypes.ParticleAction:\n      {\n        return Object.assign({}, state, {\n          loading: true\n        });\n      }\n    case TaskActionTypes.ParticleSuccessAction:\n      {\n        const newEntities = action.payload.reduce((entities, entity) => {\n          return Object.assign(entities, {\n            [entity.id]: entity\n          });\n        }, {});\n        let ids = state.ids;\n        ids.push(...action.payload.map(entity => entity.id));\n        ids = Array.from(new Set(ids));\n        return Object.assign({}, state, {\n          ids: ids,\n          entities: Object.assign({}, state.entities, newEntities),\n          loading: false\n        });\n      }\n    case TaskActionTypes.FindOneAction:\n      {\n        return Object.assign({}, state, {\n          loading: true\n        });\n      }\n    case TaskActionTypes.FindOneSuccessAction:\n      {\n        return Object.assign({}, state, {\n          entities: Object.assign({}, state.entities, {\n            [action.payload.id]: action.payload\n          }),\n          loading: false\n        });\n      }\n    case TaskActionTypes.OpenAction:\n      {\n        return Object.assign({}, state, {\n          openId: action.payload\n        });\n      }\n    case TaskActionTypes.CloseAction:\n      {\n        return Object.assign({}, state, {\n          openId: null\n        });\n      }\n    case TaskActionTypes.SaveAction:\n      {\n        return Object.assign({}, state, {\n          loading: true\n        });\n      }\n    case TaskActionTypes.SaveSuccessAction:\n      {\n        return Object.assign({}, state, {\n          entities: Object.assign({}, state.entities, {\n            [action.payload.id]: action.payload\n          }),\n          loading: false\n        });\n      }\n    case TaskActionTypes.ArchiveAction:\n      {\n        return Object.assign({}, state, {\n          loading: true\n        });\n      }\n    case TaskActionTypes.ArchiveSuccessAction:\n      {\n        const idsFavorites = state.idsFavorites;\n        idsFavorites.splice(idsFavorites.indexOf(action.payload.id), 1);\n        const idsNotifications = state.idsNotifications;\n        idsNotifications.splice(idsNotifications.indexOf(action.payload.id), 1);\n        return adapter.removeOne(action.payload.id, {\n          ...state,\n          idsFavorites: idsFavorites,\n          idsNotifications: idsNotifications\n        });\n      }\n    case TaskActionTypes.FavoriteAction:\n      {\n        return Object.assign({}, state, {\n          loading: true\n        });\n      }\n    case TaskActionTypes.FavoriteSuccessAction:\n      {\n        const ids = state.idsFavorites;\n        if (action.payload.isFavorite) {\n          ids.push(action.payload.id);\n        } else {\n          ids.splice(_.indexOf(ids, action.payload.id), 1);\n        }\n        return Object.assign({}, state, {\n          idsFavorites: ids,\n          entities: Object.assign({}, state.entities, {\n            [action.payload.id]: action.payload\n          }),\n          loading: false\n        });\n      }\n    case TaskActionTypes.CreateAction:\n      {\n        return Object.assign({}, state, {\n          loading: true\n        });\n      }\n    case TaskActionTypes.CreateSuccessAction:\n      {\n        const index = state.ids.indexOf(action.payload.afterId);\n        const ids = state.ids;\n        ids.splice(index + 1, 0, action.payload.id);\n        return Object.assign({}, state, {\n          ids: ids,\n          loading: false,\n          entities: Object.assign({}, state.entities, {\n            [action.payload.id]: action.payload\n          })\n        });\n      }\n    case TaskActionTypes.OrderAction:\n      {\n        return Object.assign({}, state, {\n          loading: true,\n          loadingOrder: true\n        });\n      }\n    case TaskActionTypes.OrderSuccessAction:\n      {\n        const ids = state.ids;\n        const taskIndex = state.ids.indexOf(action.payload.id);\n        ids.splice(taskIndex, 1);\n        const afterTaskIndex = state.ids.indexOf(action.payload.afterId);\n        const beforeTaskIndex = state.ids.indexOf(action.payload.beforeId);\n        const task = state.entities[action.payload.id];\n        task.statusId = action.payload.statusId;\n        if (afterTaskIndex > -1) {\n          ids.splice(afterTaskIndex + 1, 0, action.payload.id);\n        } else if (beforeTaskIndex > -1) {\n          ids.splice(beforeTaskIndex, 0, action.payload.id);\n        } else {\n          ids.push(action.payload.id);\n        }\n        return Object.assign({}, state, {\n          ids: ids,\n          loading: false,\n          loadingOrder: false,\n          entities: Object.assign({}, state.entities, {\n            [action.payload.id]: task\n          })\n        });\n      }\n    default:\n      return state;\n  }\n}\nexport const getEntities = state => state.entities;\nexport const getIds = state => state.ids;\nexport const getIdsFavorites = state => state.idsFavorites;\nexport const getIdsNotifications = state => state.idsNotifications;\nexport const getLoading = state => state.loading;\nexport const getLoadingOrder = state => state.loadingOrder;\nexport const getEntitiesArray = createSelector(getEntities, getIds, (entities, ids) => ids.map(id => entities[id]));\nexport const getEntitiesFavoritesArray = createSelector(getEntities, getIdsFavorites, (entities, ids) => ids.map(id => entities[id]).sort((a, b) => {\n  if (a.name < b.name) {\n    return -1;\n  }\n  if (a.name > b.name) {\n    return 1;\n  }\n  return 0;\n}));\nexport const getEntitiesNotificationsArray = createSelector(getEntities, getIdsNotifications, (entities, ids) => ids.map(id => entities[id]));\nexport const getEntitiesArrayByStatusId = statusId => createSelector(getEntitiesArray, entities => {\n  return entities.filter(item => item.statusId === statusId);\n});\nexport const getOpen = state => state.entities[state.openId];\nexport const getSelectedId = state => state.openId;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}