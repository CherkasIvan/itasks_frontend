{"ast":null,"code":"import { isArray } from 'util';\nimport { Store } from '@ngrx/store';\nimport * as FilterAction from '@core/redux/filter/filter.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nexport let FilterStoreService = /*#__PURE__*/(() => {\n  class FilterStoreService {\n    constructor(store) {\n      this.store = store;\n    }\n    getFilterByParamsForQueryParams(filter) {\n      const result = {};\n      if (filter.responsibleIds.length) {\n        result['responsibleId'] = filter.responsibleIds.concat();\n      }\n      if (filter.authorIds.length) {\n        result['authorId'] = filter.authorIds.concat();\n      }\n      if (filter.statusIds.length) {\n        result['statusId'] = filter.statusIds.concat();\n      }\n      if (filter.tagIds.length) {\n        result['tagId'] = filter.tagIds.concat();\n      }\n      result['isArchive'] = filter.isArchive;\n      if (filter.text) {\n        result['text'] = filter.text;\n      }\n      return result;\n    }\n    getNewFilter() {\n      return {\n        id: null,\n        name: null,\n        text: null,\n        isArchive: 0,\n        responsibleIds: [],\n        authorIds: [],\n        tagIds: [],\n        statusIds: []\n      };\n    }\n    getNewFilterByParams(params) {\n      params = params || {};\n      const filter = this.getNewFilter();\n      if (params.hasOwnProperty('text') && params.text) {\n        filter.text = params.text;\n      }\n      if (params.hasOwnProperty('isArchive') && params.isArchive) {\n        filter.isArchive = +params.isArchive;\n      }\n      if (params.hasOwnProperty('responsibleId') && params.responsibleId) {\n        filter.responsibleIds = isArray(params.responsibleId) ? params.responsibleId : [params.responsibleId];\n      }\n      if (params.hasOwnProperty('authorId')) {\n        filter.authorIds = isArray(params.authorId) ? params.authorId : [params.authorId];\n      }\n      if (params.hasOwnProperty('tagId')) {\n        filter.tagIds = isArray(params.tagId) ? params.tagId : [params.tagId];\n      }\n      if (params.hasOwnProperty('statusId')) {\n        filter.statusIds = isArray(params.statusId) ? params.statusId : [params.statusId];\n      }\n      return filter;\n    }\n    saveFilter(model) {\n      this.store.dispatch(new FilterAction.SaveAction(model));\n    }\n    createFilter(model) {\n      this.store.dispatch(new FilterAction.CreateAction(model));\n    }\n    deleteFilter(model) {\n      this.store.dispatch(new FilterAction.DeleteAction(model));\n    }\n    selectFilter(id) {\n      this.store.dispatch(new FilterAction.SelectAction(id));\n    }\n    static #_ = (() => this.ɵfac = function FilterStoreService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || FilterStoreService)(i0.ɵɵinject(i1.Store));\n    })();\n    static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: FilterStoreService,\n      factory: FilterStoreService.ɵfac,\n      providedIn: 'root'\n    }))();\n  }\n  return FilterStoreService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}