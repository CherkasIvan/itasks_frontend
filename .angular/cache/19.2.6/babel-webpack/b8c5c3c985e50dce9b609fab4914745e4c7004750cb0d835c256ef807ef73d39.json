{"ast":null,"code":"import { NgZone } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { MessageModel } from '@core/models/message.model';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ImagePreviewPipe } from '@ux/pipes/image-preview.pipe';\nimport { getUserId } from '@core/utils/getUserId';\nimport { TaskModel } from '@core/models/task.model';\nimport { TaskQueryService } from '@core/services/query/task.query.service';\nimport * as visibility from 'visibilityjs';\nimport * as TaskActions from '@core/redux/task/task.actions';\nimport * as MessageActions from '@core/redux/message/message.actions';\nimport * as InviteActions from '@core/redux/invite/invite.actions';\nimport { Socket } from 'ngx-socket-io';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-socket-io\";\nimport * as i2 from \"@ngrx/store\";\nimport * as i3 from \"@angular/router\";\nexport let SocketService = /*#__PURE__*/(() => {\n  class SocketService {\n    constructor(socket, store, zone, route, imagePreviewPipe, router, taskQueryService) {\n      this.socket = socket;\n      this.store = store;\n      this.zone = zone;\n      this.route = route;\n      this.imagePreviewPipe = imagePreviewPipe;\n      this.router = router;\n      this.taskQueryService = taskQueryService;\n      this.socket.on('authenticated', _ => {\n        console.log('Авторизован');\n      });\n      this.socket.on('[Task] Refresh Chats', _ => {\n        this.store.dispatch(new TaskActions.SearchNotificationAction());\n      });\n      // Добавить или обновить задачу в сайдбаре чата\n      this.socket.on('[Chat] Update Task', data => {\n        const task = new TaskModel().setAttributes(data);\n        this.store.dispatch(new TaskActions.UpdateNotificationAction(task));\n      });\n      this.socket.on('[Task] Refresh', _ => {\n        this.taskQueryService.reload();\n      });\n      this.socket.on(`[Message] Added`, data => {\n        const message = new MessageModel().setAttributes(data);\n        const userId = getUserId();\n        if (message.authorId !== userId) {\n          if (visibility.hidden() && message.followers.indexOf(userId) > -1) {\n            let imageUrl = null;\n            if (message.author.avatar) {\n              imageUrl = this.imagePreviewPipe.transform(message.author.avatar, 150, 150, true);\n            }\n            const notification = new Notification(`${message.author.firstName} ${message.author.lastName}`, {\n              body: message.message,\n              icon: imageUrl\n            });\n            notification.onclick = _ => {\n              this.zone.run(() => {\n                this.router.navigate(['/cabinet', message.projectId, 'load', {\n                  outlets: {\n                    task: ['view', message.taskId]\n                  }\n                }]);\n              });\n            };\n          }\n          if (data.taskId === this._taskId) {\n            this.store.dispatch(new MessageActions.CreateSuccessAction(message));\n          }\n        }\n      });\n      this.socket.on(`[Message] Updated`, data => {\n        const message = new MessageModel().setAttributes(data);\n        if (data.taskId === this._taskId) {\n          this.store.dispatch(new MessageActions.SaveSuccessAction(message));\n        }\n      });\n      this.socket.on(`[Message] Deleted`, data => {\n        const message = new MessageModel().setAttributes(data);\n        if (message.authorId !== getUserId()) {\n          if (data.taskId === this._taskId) {\n            this.store.dispatch(new MessageActions.DeleteSuccessAction(message));\n          }\n        }\n      });\n    }\n    listen(token) {\n      this.socket.emit('authentication', {\n        accessToken: token\n      });\n    }\n    listenOnline(projectId) {\n      if (this._projectId && this._projectId !== projectId) {\n        this.socket.removeListener(`[User] Online:${this._projectId}`);\n      }\n      this._projectId = projectId;\n      this.socket.on(`[User] Online:${projectId}`, data => {\n        this.store.dispatch(new InviteActions.SetOnlineAction(data));\n      });\n    }\n    openTask(taskId) {\n      this.closeTask();\n      this._taskId = taskId;\n    }\n    closeTask() {\n      this.socket.removeListener(`[Message] Added:${this._taskId}`);\n    }\n    static #_ = (() => this.ɵfac = function SocketService_Factory(__ngFactoryType__) {\n      i0.ɵɵinvalidFactory();\n    })();\n    static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SocketService,\n      factory: SocketService.ɵfac,\n      providedIn: 'root'\n    }))();\n  }\n  return SocketService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}